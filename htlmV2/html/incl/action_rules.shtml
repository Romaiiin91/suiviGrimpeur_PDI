<!--#include virtual="/sm/sm.srv?action=get&group=Output.NbrOfOutputs" -->


  <!--#include virtual="/sm/sm.srv?action=get&group=PTZ.Support" -->

<script src="/incl/event_list.js?ver=<!--#echo var="root_Properties_Firmware_Version" option="encoding:url" -->" language="javascript" type="text/javascript"></script>

<script language="javascript" type="text/javascript">
<!--
  var langObjEventsActRules = new Language("events", "action_rules");
  langObjEventsActRules.init(false, true);
  AddBtnStatTxt = langObjEventsActRules.getText("actionAddBtnStatTxt");
  CopyBtnStatTxt = langObjEventsActRules.getText("actionCopyBtnStatTxt");
  ModBtnStatTxt = langObjEventsActRules.getText("actionModBtnStatTxt");
  RemBtnStatTxt = langObjEventsActRules.getText("actionRemBtnStatTxt");
  ConvertBtnStatTxt = langObjEventsActRules.getText("actionConvertBtnStatTxt");

  <!--#include virtual="/incl/topic_list.shtml" -->

  var actionNameSpaces = new SOAPClientNS();
  actionNameSpaces.add("aa", "http://www.axis.com/vapix/ws/action1" );
  actionNameSpaces.add("wsnt", "http://docs.oasis-open.org/wsn/b-2" );
  actionNameSpaces.add("tns1", "http://www.onvif.org/ver10/topics" );
  actionNameSpaces.add("tnsaxis", "http://www.axis.com/2009/event/topics" );

  var now = new Date();
  var wsdlUrl = "/wsdl/vapix/ActionService.wsdl?timestamp=" + now.getTime();

  var AddBtnStatTxt;
  var CopyBtnStatTxt;
  var ModBtnStatTxt;
  var RemBtnStatTxt;
  var ConvertBtnStatTxt;

  //List rendering
  
  function onInit()
  {
    createSelect();
    getRecipients();
    getEvents();
    loadActionTemplateMap();
    getActionConfigs();
    getActionRules();
    
    displayConvertEvents();
  }

  addLoadEvent( onInit );

  var _list_obj;
  function createSelect()
  {
    var headers = [ "",
                    langObjEventsActRules.getText("actListNaTxt"), 
                    langObjEventsActRules.getText("actListTriggerTxt"), 
                    langObjEventsActRules.getText("actListSchTxt"), 
                    langObjEventsActRules.getText("actListActionTxt"),
                    langObjEventsActRules.getText("actListReciTxt") ];
    var list_container = document.getElementById("idListContainer");
    _list_obj = new select_input_class(list_container, headers);
    _list_obj.setColumnWidths(["28px", "125px", "125px", "100px", "100px", "95px"]);
    _list_obj.setSortByColumn(1);
    _list_obj.ondblclick = ondblclickActionRule;
    _list_obj.drawTable();
  }
  
  function reloadList()
  {
    getRecipients();
    getActionConfigs();
    getActionRules();
    displayConvertEvents();
  }

  var ajaxRequest;
  function displayConvertEvents()
  {
    var now = new Date();
    var timestamp = now.getTime();
    
    var url = "/axis-cgi/param.cgi?action=list&group=root.Event.*&timestamp="+timestamp;

    if( !ajaxRequest )
      ajaxRequest = AxisConnectionFactory.createAjaxConnection();
    AxisConnectionFactory.sendSync(["GET", url], null, ajaxRequest);

    if( ajaxRequest.getStatus() == 200 )
    {
      var listText = ajaxRequest.getResponseText();

      document.getElementById("eventConvert").style.display = (listText.length > 0 ? "block" : "none");
    }
  }
  
  function convertEvents()
  {
    var xmlNodes = null;
    var now = new Date();
    var timestamp = now.getTime();
    var url = "/axis-cgi/convertlegacyevents.cgi?timestamp="+timestamp;

    if( !ajaxRequest )
      ajaxRequest = AxisConnectionFactory.createAjaxConnection();
    AxisConnectionFactory.sendSync(["GET", url], null, ajaxRequest);

    if( ajaxRequest.getStatus() == 200 )
    {
      var convXml = ajaxRequest.getResponseXml();

      if( convXml )
      {
        //Setting this because of the default namespace
        var xpathExp = '//*[local-name() = "GeneralSuccess" and namespace-uri() = "http://www.axis.com/vapix/http_cgi/convertlegacyevents"]';

        if(ajaxRequest.client.supports.activeX)
          convXml.setProperty("SelectionLanguage", "XPath");
        var xmlNodes = convXml.selectNodes(xpathExp);

        if(xmlNodes != null)
        {
          document.location.reload(true);
          return;
        }
      }
    }
    alert( langObjEventsActRules.getText("actListNotConvertAlert") );
  }

  var actionTemplateMap = new Array();
  function addToActionMaps( templateId, webId, webName, hide )
  {
    actionTemplateMap[templateId] = {val:webId, name:webName };
  }

  function loadActionTemplateMap()
  {
    <!--#set var="action" val="scripts" -->
    <!--#set var="map_only" val="yes" -->

        <!--#include virtual="/operator/action_send_images.shtml" -->
        <!--#include virtual="/operator/action_send_videoclip.shtml" -->
        <!--#include virtual="/operator/action_record_video.shtml" -->
    <!--#include virtual="/operator/action_notification.shtml" -->


      <!--#set var="skipPTZ" val="no" -->

      <!--#include virtual="/operator/action_ptz_control.shtml" -->

    
        <!--#if expr="$(root_PTZ_Support_S1_IrCutFilter) = true" -->
          <!--#include virtual="/operator/action_day_night_mode.shtml" -->
        <!--#endif -->
    

    <!--#include virtual="/operator/action_dynamic_overlay.shtml" -->

  }

  function getRecipients()
  {
    var params = new SOAPClientParameters();
  
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:GetRecipientConfigurations";
  
    return SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, false, loadRecipients );
  }

  var recipients;
  function loadRecipients( responseObj )
  {
    if( responseObj )
    {
      if( responseObj.name == "Error" )
      {
        var errorMsg = ( ( responseObj.description )?responseObj.description:(responseObj.fileName)?responseObj.fileName:responseObj.message );
        alert( errorMsg );
        return false;
      }
      recipients = new Array();
      var recipientParent = responseObj.RecipientConfigurations;
      if( recipientParent )
      {
        var recipientArr = recipientParent.RecipientConfiguration;
        if( recipientArr )
        {
          if( recipientArr.constructor != Array )
          {
            recipientArr = new Array(recipientArr);
          }

          for( var i = 0; i < recipientArr.length; i++ )
          {
            recipients[ recipientArr[ i ].ConfigurationID ] = recipientArr[ i ];
          }
        }
      }
    }//if response
    return true;
  }

  var eventNameSpaces = new SOAPClientNS();
  eventNameSpaces.add("aev", "http://www.axis.com/vapix/ws/event1" );
  eventNameSpaces.add("tns1", "http://www.onvif.org/ver10/topics" );
  eventNameSpaces.add("tnsaxis", "http://www.axis.com/2009/event/topics" );
  eventNameSpaces.add("wsnt", "http://docs.oasis-open.org/wsn/b-2" );

  function getEvents()
  {
    var params = new SOAPClientParameters();

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var eventWsdlUrl = "/wsdl/vapix/EventService.wsdl";
    var url = "/vapix/services"+timestamp;
    var method = "aev:GetEventInstances";

    SOAPClient.invoke( eventWsdlUrl, url, eventNameSpaces, method, params, false, loadEvents );
  }

  var events = new Array();

  function loadEvents( responseObj )
  {
    events = new Array();
    scheduleNames = new Array();
    if( responseObj )
    {
      var topicSet = responseObj.TopicSet;
      createEventNameArray( topicSet, "", "" );
    }
  }

  function findScheduleNames( topicParent, topicKeyVal )
  {
    var messageInstance = topicParent["MessageInstance"];
    if( !messageInstance )
    {
      for( var topicKey in topicParent )
      {
        if( topicKey == "topic" || topicKey == "NiceName" )
        {
          continue;
        }
        topicObj = topicParent[ topicKey ];
        if( topicObj )
        {
          findScheduleNames( topicObj, topicKeyVal+"/"+topicKey );
        }
      }
    }
    else
    {
      var sourceInstance = messageInstance["SourceInstance"];
      if( sourceInstance )
      {
        var itemInstance = sourceInstance["SimpleItemInstance"];
        if( itemInstance )
        {
          var valueNodes = itemInstance["Value"];
          if( valueNodes )
          {
            var itemName = itemInstance.Name;
            if( valueNodes.constructor == Object )
            {
              valueNodes = new Array(valueNodes);
            }
            var nodeValue;
            var displayName;
            var nodeObj;
            for( var i = 0; i < valueNodes.length; i++ )
            {
              nodeObj = valueNodes[i];
              if( nodeObj.constructor == Object )
              {
                nodeValue = nodeObj["#text"];
                displayName = ( ( nodeObj.NiceName )?nodeObj.NiceName:nodeValue );
                if( messageInstance.isProperty == "true" )
                {
                  addScheduleName( topicKeyVal, nodeValue, displayName );
                }
                else
                {
                  if( !recurrenceNames[ topicKeyVal ] )
                  {
                    recurrenceNames[ topicKeyVal ] = new Array();
                    recurrenceNames[ topicKeyVal+"//." ] = new Array();
                  }
                  recurrenceNames[ topicKeyVal ][ nodeValue ] = displayName;
                  recurrenceNames[ topicKeyVal+"//." ][ nodeValue ] = displayName;
                }
              }
            }
          }
        }
      }
    }
  }

  function addNewSchedule(name, id)
  {
    if( name != "" && id != "")
    {
      var optionValue = "UserAlarm/Recurring/Interval";
      addScheduleName( optionValue, id, [name] );
    }
  }

  function getActionConfigs()
  {
    var params = new SOAPClientParameters();
  
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:GetActionConfigurations";
  
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, false, loadActionConfigs );
  }

  var actionConfigs;
  function loadActionConfigs( responseObj )
  {
    if( responseObj )
    {
      actionConfigs = new Array();
      var actionParent = responseObj.ActionConfigurations;
      if( actionParent )
      {
        var actionConfigObj = actionParent.ActionConfiguration;
        if( actionConfigObj )
        {
          if( actionConfigObj.constructor != Array )
          {
            actionConfigObj = new Array( actionConfigObj );
          }
          for( var i = 0; i < actionConfigObj.length; i++ )
          {
            actionConfigs[ actionConfigObj[ i ].ConfigurationID ] = actionConfigObj[ i ];
          }
        }
      }
    }//if response
  }

  function getActionRules()
  {
    var params = new SOAPClientParameters();
  
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:GetActionRules";
  
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, false, loadActionRuleList );
  }


  var ruleArray;
  function loadActionRuleList( responseObj )
  {
    _list_obj.clear();
    var isEmpty = true;
    ruleArray = new Array();

    if( responseObj )
    {
      var actionParent = responseObj.ActionRules;
      if( actionParent )
      {
        var actionRule = actionParent.ActionRule;
        if( actionRule )
        {
          if( actionRule.constructor != Array )
          {
            actionRule = new Array( actionRule );
          }
          for( var i = 0; i < actionRule.length; i++ )
          {
            addActionRuleOption( actionRule[ i ] );
          }
        }
      }
    }//if response
    _list_obj.drawTable();
  }

  function filterHTML( string )
  {
    return string.replace(/>/g, "&gt;").replace(/</g, "&lt;");
  }

  function addActionRuleOption( ruleObj )
  {
    var added = false;
    if( ruleObj )
    {
      var configObj = actionConfigs[ ruleObj.PrimaryAction ];
      var isValidEvent = true;
      var errorStrArr = new Array();
      var checkedEvent;

      if( configObj )
      {
        if(configObj.TemplateToken == "com.axis.action.recording.continuous.local_storage")
          return added;

        var topicId, message;
        var eventName = "";
        var scheduleName = "";
        var conditionArr = new Array();
        /* Attaching a function that can add both an object and an array of objects.  */
        conditionArr.addToArray = function( arr ) {
          if( arr instanceof Array )
          {
            this.push.apply(this, arr);
          }
          else
          {
            this.push(arr);
          }
        };
        
        if( ruleObj.StartEvent )
        {
          conditionArr.addToArray(ruleObj.StartEvent);
        }
        if( ruleObj.Conditions )
        {
          conditionArr.addToArray(ruleObj.Conditions.Condition)
        }
        
        for( var i = 0; i < conditionArr.length && ( eventName == "" || scheduleName == "" ); i++ )
        {
          checkedEvent = checkValidEvent(conditionArr[i]);
          if ( !checkedEvent.isValid )
          {
            isValidEvent = false;
            errorStrArr.push(checkedEvent.error);
          }
          
          topicId = getTopicKey(conditionArr[i].TopicExpression["#text"]);
          if( topicId.indexOf("UserAlarm") != -1 )
          {
            if( scheduleName == "" )
            {
              message = parseMessageStr(conditionArr[i].MessageContent["#text"]);
              if( scheduleNames[topicId] && message["id"] && message["active"] == 1 )
               {
                 scheduleName = scheduleNames[topicId][message["id"]];
               }
             }
          }
          if( eventName == "" )
          {
            eventName = getEventNameFromTopicId(conditionArr[i].TopicExpression["#text"]);
          }
        }

        if( eventName == "" )
        {
          eventName = "-";
        }
        if( !isValidEvent )
        {
          eventName = "<span class=\"generalError\">" + eventName + "</span>";
        }
        if( scheduleName == "" )
        {
          scheduleName = "-";
        }

        var templateId = configObj.TemplateToken;
        var templateObj = actionTemplateMap[ templateId ];
        if( templateObj.name )
        {
          templateName = templateObj.name;
        }
        else
        {
          templateName = templateId;
        }

        var enabledTxt = "<input type=\"checkbox\" name=\"ruleEnabled\" " + (ruleObj.Enabled == "false" ? "" : "checked") + " onclick=\"javascript:onRuleToggle('" + ruleObj.RuleID + "', this);\">";
        var ruleName = ((ruleObj.Name) ? ruleObj.Name.replace(/</g, "&lt;").replace(/>/g, "&gt;") : "");
        var recipientsList = "-";
        if (configObj.Parameters && configObj.Parameters.Parameter)
        {
          var recipientI = findRecipientIndex(configObj.Parameters.Parameter);
          var recipientType = getRecipientType(configObj);
          if (recipientType != "")
          {
            recipientsList = getRecipientSelect(recipientType, recipientI, ruleObj.RuleID, "PrimaryAction", configObj.Parameters.Parameter);
          }
        }
        var rowArr = [enabledTxt,
                      ((ruleName)?filterHTML(ruleName):""),
                      eventName,
                      scheduleName,
                      templateName,
                      recipientsList];

        _list_obj.addRow(rowArr, ruleObj.RuleID, errorStrArr.join("\n"));

        ruleArray[ ruleObj.RuleID ] = ruleObj;
        added = true;
      }
    }
    return added;
  }

  function getEventNameFromTopicId( topicId )
  {
    var eventName = "";

    topicId = convertTopicValueAction_rules(topicId);
    topicId = getTopicKey(topicId);
    var orgTopicId = topicId;
    if( events[ topicId ] )
    {
      eventName = events[ topicId ];
    }
    else if( events[ topicId+"//." ] )
    {
      eventName = events[ topicId+"//." ];
    }
    else
    {
      while( topicId.indexOf("/") != -1 && eventName == "" )
      {
        topicId = topicId.substring(0, topicId.lastIndexOf("/"));
        if( events[ topicId ] )
        {
          eventName = events[ topicId ];
        }
        else if( events[ topicId+"//." ] )
        {
          eventName = events[ topicId+"//." ];
        }
      }
    }
    if( eventName == "" )
    {
      var groupNbr = -1;
      var childNbr = -1;
      for(var i=0; i < groupArr.length; i++)
      {
        for(var j=0; j < groupArr[i].topicArray.length; j++)
        {
          if( topicId.indexOf(groupArr[i].topicArray[j]) != -1)
          {
            groupNbr = i;
            break;
          }
        }
      }
      
      if(groupNbr > -1)
      {
        for(var i=0; i < groupChildArr.length; i++)
        {
          if(groupChildArr[i].parent == groupNbr)
          {
            if(groupChildArr[i].topic == orgTopicId)
            {
              childNbr = i;
              break;
            }
          }
        }
      }
    
      if(groupNbr != -1 && childNbr != -1)
      {
        eventName = groupArr[groupNbr].name + " - " + groupChildArr[i].name;
      }
      else
        eventName = orgTopicId;
    }

    return eventName;
  }

  function convertTopicValueAction_rules(topicStr)
  {
    var convertArr = new Array();
    convertArr.push( { oldExp: "tnsaxis:Storage/Disruption", newExp: "tns1:Storage/tnsaxis:Disruption"} );
    convertArr.push( { oldExp: "tnsaxis:Storage/Recording", newExp: "tns1:Storage/tnsaxis:Recording"} );
    convertArr.push( { oldExp: "tnsaxis:CameraApplicationPlatform/", newExp: "tns1:CameraApplicationPlatform/tnsaxis:"} );

    for(var i=0; i < convertArr.length; i++)
    {
      if(topicStr.indexOf(convertArr[i].oldExp) > -1)
      {
        return topicStr.replace(convertArr[i].oldExp, convertArr[i].newExp);
      }
    }

    return topicStr;
  }

  function parseMessageStr( str )
  {
    var messageArr = new Array();
    var re = /boolean\(\/\/SimpleItem\[@Name="([^"]*)" and @Value="([^"]*)"\]\)/ig;
    var theName, theValue, matchArr;
    do
    {
      matchArr = re.exec(str);

      if( matchArr && matchArr.length > 2 )
      {
        theName = matchArr[ 1 ];
        theValue = matchArr[ 2 ];
        if( theName && theValue )
        {
          messageArr[ theName ] = theValue;
        }
      }
    }
    while( matchArr )

    return messageArr;
  }

  // Add, Modify or Copy an Action rule
  function setupRule( action )
  {
    var btnEl = document.getElementById(action+"Btn");
    btnEl.disabled = true;
    disableInputs();

    if( action == "add" || action == "copy" )
    {
      var maxEvents = _list_obj.length;
      if( maxEvents >= 15 )
      {
        if( action == "add" )
        {
          alert( langObjEventsActRules.getText("actionNoRulesAlert") );
        }
        else
        {
          alert( langObjEventsActRules.getText("actionCopyNoAlert") );
        }
        btnEl.disabled = false;
        enableInputs();
        return;
      }
    }
    
    var url = "/operator/action_rule_setup.shtml?doAction="+action;
    if( action != "add" )
    {
      if( _list_obj.selectedIndex >= 0 )
      {
        var ruleId = _list_obj.selectedValue;
        url += "&ruleId="+ruleId;
      }
      else
      {
        alert( langObjEventsActRules.getText("actionSeAlert") );
        btnEl.disabled = false;
        enableInputs();
        return;
      }
    }

    var now = new Date();
    openPopUp( url + '&timestamp=' + now.getTime(), 'ActionRuleSetup', 585, 630, true);
    btnEl.disabled = false;
    enableInputs();
  }

  function ondblclickActionRule()
  {
    setupRule("modify");
  }
  
  // Remove an Action Rule and it's configs
  var removedId;
  var action_queue;
  function removeRule()
  {
    var btnEl = document.getElementById("removeBtn");
    btnEl.disabled = true;
    disableInputs();

    if( _list_obj.selectedIndex >= 0 )
    {
      var ruleId = _list_obj.selectedValue;
      var rule = ruleArray[ ruleId ];
      var nameValue = rule.Name;
      if( confirm( langObjEventsActRules.getText("actionDelConfirm")+" \""+nameValue+"\"?"))
      {
        action_queue = new Array();
        action_queue.push( "removeRule_action(" + ruleId + ")" );
        if( rule.PrimaryAction )
        {
          action_queue.push( "removeActionConfigs(" + rule.PrimaryAction + ")" );
        }
        eval( action_queue.shift() );
      }
    }
    else 
    {
      alert( langObjEventsActRules.getText("actionSeAlert") );
    }

    btnEl.disabled = false;
    enableInputs();
  }

  var removedRuleObj;
  function removeRule_action(ruleId)
  {
    var params = new SOAPClientParameters();
    params.add("RuleID", ruleId );
    removedId = ruleId;

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();

    var url = "/vapix/services"+timestamp;
    var method = "aa:RemoveActionRule";
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, true, onRemoveRule );
  }
  function onRemoveRule( responseObj )
  {
    if( responseObj )
    {
      if( responseObj.name == "Error" )
      {
        var errorMsg = ( ( responseObj.description )?responseObj.description:(responseObj.fileName)?responseObj.fileName:responseObj.message );
        alert( errorMsg );
        document.getElementById("removeBtn").disabled = false;
        enableInputs();
        return;
      }
    }
    if( action_queue.length > 0 )
    {
      eval( action_queue.shift() );
    }
    else
    {
      document.getElementById("removeBtn").disabled = false;
      enableInputs();
      reloadList();
    }
  }

  function removeActionConfigs( actionId )
  {
    var params = new SOAPClientParameters();
    params.add("ConfigurationID", actionId );

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();

    var url = "/vapix/services"+timestamp;
    var method = "aa:RemoveActionConfiguration";
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, true, onRemoveActionConfigs );
  }

  function onRemoveActionConfigs( responseObj )
  {
    if( responseObj )
    {
      if( responseObj.name == "Error" )
      {
        var errorMsg = ( ( responseObj.description )?responseObj.description:(responseObj.fileName)?responseObj.fileName:responseObj.message );
        alert( errorMsg );
        document.getElementById("removeBtn").disabled = false;
        enableInputs();
        return;
      }
    }//if response

    if( action_queue.length > 0 )
    {
      eval( action_queue.shift() );
    }
    else
    {
      document.getElementById("removeBtn").disabled = false;
      enableInputs();
      reloadList();
    }
  }

  function getRecipientType(obj)
  {
    var returnType = "";
    if (obj.TemplateToken)
    {
      var recipientTokenArr = obj.TemplateToken.split(".");
      returnType = recipientTokenArr[recipientTokenArr.length-1];
      switch(returnType)
      {
        case "tcp":
        case "ftp":
        case "http":
        case "https":
        case "smtp":
        case "networkshare":
          break;
        default:
          returnType = "";
      }
    }
    return returnType;
  }

  function getRecipientSelect(preSelectedType, preSelectedId, ruleId, actionType, params)
  {
    var recipientName, recipientObj, recipientTokenArr, recipientType;
    var isRecipientFound = false;
    var str = "<select name=\"recipientsList\" class=\"small\" onchange=\"onRecipientChange('" + ruleId + "', this, '" + actionType + "');\">";

    for (var key in recipients)
    {
      recipientObj = recipients[key];
      recipientType = getRecipientType(recipientObj);
      if (recipientType == preSelectedType)
      {
        isRecipientFound |= (key == preSelectedId);
        recipientName = ((recipientObj.Name)?recipientObj.Name:"");
        str += "<option value=\"" + key + "\"" + (key == preSelectedId ? " selected" : "") + ">" + recipientName + "</option>";
      }
    }

    if (!isRecipientFound)
    {
      str += "<option value=\"\" selected class=\"gray\"> ";
      switch(preSelectedType)
      {
        case "tcp":
          str += langObjEventsActRules.getText("tcpTxt")+" ";
          str += getRecipientParamValue(params, "host");
          break;
        case "ftp":
          str += langObjEventsActRules.getText("ftpTxt")+" ";
          str += getRecipientParamValue(params, "host");
          break;
        case "http":
          str += langObjEventsActRules.getText("httpTxt")+" ";
          str += getRecipientParamValue(params, "upload_url").replace("http:\/\/", "");
          break;
        case "https":
          str += langObjEventsActRules.getText("httpsTxt")+" ";
          str += getRecipientParamValue(params, "upload_url").replace("https:\/\/", "");
          break;
        case "smtp":
          str += getRecipientParamValue(params, "email_to");
          break;
        case "networkshare":
          str += langObjEventsActRules.getText("nsTxt")+" ";
          var nsShareId = getRecipientParamValue(params, "share_id");
          var timestamp = now.getTime();
          var url = "/axis-cgi/disks/networkshare/list.cgi?schemaversion=1.0&shareid="+nsShareId+"&timestamp="+timestamp;
          
          var listXml = sendAction( url, "get" );
          
          if( listXml )
          {
            xmlNode = listXml.selectSingleNode("//NetworkShare");
            if (xmlNode)
            {
              str += xmlNode.getAttribute("Address");
            }
          }

          break;
        default:
          str += langObjEventsActRules.getText("unknownTxt")+" ";
          break;
      }
      str += "</option>";
    }

    str += "</select>";

    return str;
  }

  function findRecipientIndex(paramArr)
  {
    var returnRecipientIndex = -1;
    if (recipients)
    {
      var isRecipientFound, recipientParamName, recipientParamValue, paramName, paramValue;
      for( var key in recipients )
      {
        isRecipientFound = true;
        var recipientParams = recipients[key].Parameters.Parameter;
        for (var param in recipientParams )
        {
          if (recipientParams.constructor != Array)
          {
            recipientParamName = recipientParams.Name;
            recipientParamValue = recipientParams.Value;
          }
          else
          {
            recipientParamName = recipientParams[param].Name;
            recipientParamValue = recipientParams[param].Value;
          }
          var isParamFound = false;
          for (var paramKey in paramArr)
          {
            if (paramArr[paramKey].Name == recipientParamName && paramArr[paramKey].Value == recipientParamValue)
            {
              isParamFound = true;
              break;
            }
          }
          if (!isParamFound)
          {
            isRecipientFound = false;
            break;
          }
        }
        if (isRecipientFound)
        {
          returnRecipientIndex = key;
          break;
        }
      }
    }
    return returnRecipientIndex;
  }

  function saveActionConfig()
  {
    var soapParamObj = new SOAPClientParameters();
    var paramObj = actionRuleChanged_newPrimaryAction;
    soapParamObj.add("NewActionConfiguration", paramObj);

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
  
    var url = "/vapix/services"+timestamp;
    var method = "aa:AddActionConfiguration";
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, soapParamObj, true, onSaveActionConfig );
  }

  function Parameter( name, value )
  {
    name = name.setIsAttribute( true );
    this.Name = name;

    value = value.setIsAttribute( true );
    this.Value = value;

    return this;
  }

  function onSaveActionConfig( responseObj )
  {
    if( responseObj )
    {
      var newId = responseObj.ConfigurationID;
      actionRuleChanged_newRule.PrimaryAction = newId;
      if( action_queue.length > 0 )
      {
        eval( action_queue.shift() );
      }
    }
  }

  function saveRule()
  {
    disableInputs();
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
  
    var url = "/vapix/services"+timestamp;
    var method = "aa:AddActionRule";

    var params = new SOAPClientParameters();
    params.add( "NewActionRule", actionRuleChanged_newRule );

    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, true, onSaveRule );
  }

  function onSaveRule( responseObj )
  {
    if( responseObj )
    {
      actionRuleChanged_newRule.RuleID = responseObj.RuleID;
      if( action_queue.length > 0 )
      {
        eval( action_queue.shift() );
      }
    }
    reloadList();
    enableInputs();
  }

  var actionRuleChanged_actionType;
  var actionRuleChanged_oldRule;
  var actionRuleChanged_oldPrimaryAction;
  var actionRuleChanged_newRule;
  var actionRuleChanged_newPrimaryAction;
  function onRecipientChange(ruleId, sel, actionType)
  {
    disableInputs();
    var newRecipientI = sel.options[sel.selectedIndex].value;
    actionRuleChanged_actionType = actionType;
    actionRuleChanged_oldRule = ruleArray[ ruleId ];
    actionRuleChanged_oldPrimaryAction = actionConfigs[ruleArray[ruleId].PrimaryAction];
    actionRuleChanged_newRule = clone(actionRuleChanged_oldRule);
    actionRuleChanged_newPrimaryAction = clone(actionRuleChanged_oldPrimaryAction);

    var params = recipients[newRecipientI].Parameters.Parameter;
    var tmpAction = actionRuleChanged_newPrimaryAction;
    if (params.constructor != Array)
    {
      params = new Array(params);
    }
    for (var i = 0; i < params.length; i++)
    {
      setParameter(tmpAction, params[i].Name, params[i].Value);
    }
    convertParameters(tmpAction);
    delete tmpAction.ConfigurationID;
    convertConditions(actionRuleChanged_newRule);
    delete actionRuleChanged_newRule.RuleID;

    action_queue = new Array();
    action_queue.push( "removeRule_action(" + actionRuleChanged_oldRule.RuleID + ")" );
    action_queue.push( "removeActionConfigs(" + actionRuleChanged_oldRule.PrimaryAction + ")" );
    action_queue.push( "saveActionConfig()" );
    action_queue.push( "saveRule()" );

    eval( action_queue.shift() );
  }

  function onRuleToggle(ruleId, checkbox)
  {
    disableInputs();
    actionRuleChanged_oldRule = ruleArray[ ruleId ];
    actionRuleChanged_oldPrimaryAction = false;
    actionRuleChanged_newRule = clone(actionRuleChanged_oldRule);
    actionRuleChanged_newPrimaryAction = false;

    convertConditions(actionRuleChanged_newRule);
    delete actionRuleChanged_newRule.RuleID;

    actionRuleChanged_newRule.Enabled = checkbox.checked;
    action_queue = new Array();
    action_queue.push( "removeRule_action(" + actionRuleChanged_oldRule.RuleID + ");" );
    action_queue.push( "saveRule();" );
    eval( action_queue.shift() );
  }

  function setParameter(actionConfigObj, name, value)
  {
    var params = actionConfigObj.Parameters.Parameter;
    for (var t in params)
    {
      if (params[t].Name == name)
      {
        params[t].Value = value;
        break;
      }
    }
  }

  function convertParameters(actionToConvert)
  {
    var paramsToConvert = actionToConvert.Parameters.Parameter;
    var paramArray = new Array();
    for (var t in paramsToConvert)
    {
      if( paramsToConvert[t].Name )
      {
        paramArray.push(new Parameter( paramsToConvert[t].Name, paramsToConvert[t].Value ));
      }
    }
    actionToConvert.Parameters = paramArray;
  }

  function convertConditions(ruleToConvert)
  {
    if( ruleToConvert.StartEvent && ruleToConvert.StartEvent["TopicExpression"] )
    {
      var startEventTopic, startEventMessage;
      startEventTopic = ruleToConvert.StartEvent["TopicExpression"]["#text"];
      if ( ruleToConvert.StartEvent["MessageContent"] )
      {
        startEventMessage = ruleToConvert.StartEvent["MessageContent"]["#text"];
      }
      ruleToConvert.StartEvent =  getTopicFilterObject( startEventTopic, startEventMessage );
    }
    
    if (ruleToConvert.Conditions && ruleToConvert.Conditions.Condition)
    {
      var conditionsToConvert = ruleToConvert.Conditions.Condition;
      var conditionsArray = new Array();
      var newCondition, conditionPart, Dialect, value;
      if (conditionsToConvert["TopicExpression"])
      {
        conditionsToConvert = new Array(conditionsToConvert);
      }
      for (var i in conditionsToConvert)
      {
        newCondition = getTopicFilterObject(conditionsToConvert[i]["TopicExpression"]["#text"], conditionsToConvert[i]["MessageContent"]["#text"]);
        conditionsArray.push({"Condition":newCondition});
      }
      ruleToConvert.Conditions = conditionsArray;
    }
    ruleToConvert.Enabled = (ruleToConvert.Enabled == "true");
  }

  function clone(o)
  {
    var temp = new Object();
    for (myvar in o)
    {
      if (typeof(o[myvar]) == "object")
      {
        // This is an object, so it should be cloned.
        temp[myvar] = clone(o[myvar]);
      }
      else
      {
        temp[myvar] = o[myvar];
      }
    }
    return temp;
  }

  function createEventNameArray( topicParent, topicParentKey, topicParentName )
  {
    for (var key in topicParent)
    {
      if (topicParent[key] && key != "topic" && key != "NiceName" )
      {
        var topicKey = (topicParentKey == "" ? "" : topicParentKey + "/") + key;
        var groupChildNr = getGroupChildNrFromTopic(topicKey);
        var topicName = "";
        var groupName = "";
        
        if (events[topicParentKey])
        {
          topicName += events[topicParentKey];
        }
        else if (groupChildNr >= 0)
        {
          topicName += groupArr[groupChildArr[groupChildNr].parent].name;
        }
        else
        {
          var groupNr = findGroupNrFromUnknownTopic(topicKey);
          if (groupNr >= 0)
          {
            topicName += groupArr[groupNr].name;
          }
          else if (topicKey != "")
          {
            topicName += topicKey.split("/")[0] + " - " + topicKey.split("/")[1];
          }
        }

        if (groupChildNr >= 0)
        {
          topicName += (topicName.length > 0 ? " - " : "") + groupChildArr[groupChildNr].name;
          if (groupChildArr[groupChildNr].valueName)
          {
            topicName += (topicName.length > 0 ? " - " : "") + groupChildArr[groupChildNr].valueName;
          }
        }
        else if (topicParent[key].MessageInstance)
        {
          if (topicParent[key].NiceName)
          {
            topicName += (topicName.length > 0 ? " - " : "") + topicParent[key].NiceName;
          }
          else if (topicParent.NiceName)
          {
            topicName += (topicName.length > 0 ? " - " : "") + topicParent.NiceName;
          }
          else if (topicParentName != "")
          {
            topicName += (topicName.length > 0 ? " - " : "") + topicParentName;
          }
          else
          {
            topicName += (topicName.length > 0 ? " - " : "") + key;
          }
        }
        
        if( topicParentKey == "UserAlarm" )
        {
          findScheduleNames( topicParent[key], topicKey );
        }
        events[topicKey] = topicName;
        if (!topicParent[key].MessageInstance)
        {
          createEventNameArray(topicParent[key], topicKey, topicName);
        }
      }
    }
  }

  function getTopicKey(topicId)
  {
    return topicId.replace("tns1:", "").replace("tnsaxis:", "");
  }

  function toggleInputs(name, enabled)
  {
    var o = document.getElementsByName(name);
    for (var i = 0; i < o.length; i++)
    {
      o[i].disabled = !enabled;
    }
  }

  function disableInputs()
  {
    _list_obj.disabled = true;
    toggleInputs("recipientsList", false);
    toggleInputs("ruleEnabled", false);
  }

  function enableInputs()
  {
    _list_obj.disabled = false;
    toggleInputs("recipientsList", true);
    toggleInputs("ruleEnabled", true);
  }
  
// -->
</script>
