<script type="text/javascript" language="javascript">
<!--
  var langObjEventsActRulSetup = new Language("events", "action_rule_setup");
  langObjEventsActRulSetup.init(false, true);


  <!--#if expr="$doAction = copy" -->
    <!--#set var="doAction" val="modify" -->
    <!--#set var="copy" val="yes" -->
  <!--#endif -->

  <!--#include virtual="/incl/topic_list.shtml" -->

  var emptyOptionAlertTxt;

  var actionNameSpaces = new SOAPClientNS();
  actionNameSpaces.add("aa", "http://www.axis.com/vapix/ws/action1" );
  actionNameSpaces.add("wsnt", "http://docs.oasis-open.org/wsn/b-2" );
  actionNameSpaces.add("tns1", "http://www.onvif.org/ver10/topics" );
  actionNameSpaces.add("tnsaxis", "http://www.axis.com/2009/event/topics" );

  var wsdlUrl = "/wsdl/vapix/ActionService.wsdl";

  <!--#if expr="$doAction = modify" -->
    function getActionConfigs()
    {
      var params = new SOAPClientParameters();
    
      var now = new Date();
      var timestamp = "?timestamp="+now.getTime();
      
      var url = "/vapix/services"+timestamp;
      var method = "aa:GetActionConfigurations";
    
      SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, false, loadSelectedActionConfigs );
    }
  
    var actionConfig;
    var failoverActionConfig;
    function loadSelectedActionConfigs( responseObj )
    {
      if( responseObj )
      {
        var actionParent = responseObj.ActionConfigurations;
        if( actionParent )
        {
          var actionConfigObj = actionParent.ActionConfiguration;
          if( actionConfigObj )
          {
            if( actionConfigObj.constructor != Array )
              actionConfigObj = new Array( actionConfigObj );
            for( var i = 0; i < actionConfigObj.length; i++ )
            {
              if( actionConfigObj[ i ].ConfigurationID == loadedActionRule.PrimaryAction )
                actionConfig = actionConfigObj[ i ];
              if( loadedActionRule.FailoverAction && actionConfigObj[ i ].ConfigurationID == loadedActionRule.FailoverAction )
                failoverActionConfig = actionConfigObj[ i ];
            }
          }
        }
      }//if response
    }
  <!--#endif -->

  function getActionsTemplates()
  {
    var params = new SOAPClientParameters();

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:GetActionTemplates";


    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, true, loadActionList );
  }

  var actionTemplateMap = new Array();
  var renderedActions = new Array();

  function addToActionMaps( templateId, webId, webName, hide, isPTZ )
  {
    if( !actionTemplateMap[templateId] )
    {
      actionTemplateMap[templateId] = {val:webId, name:webName };
      if( !renderedActions[webId] )
      {
        renderedActions[webId] = {initiated:false, hidden:hide, ptz:isPTZ };
      }
    }
  }

  function loadActionList( responseObj )
  {
    <!--#if expr="$doAction = modify" -->
      if( loadedActionRule.FailoverAction )
      {
        var o = document.getElementById("usesFailover");
        o.style.display = "";
        o.innerHTML = langObjEventsActRulSetup.getText("failoverActionTxt");
      }
    <!--#endif -->

    var inputActionEl = document.getElementById("actionType");
    
      <!--#if expr="$gatekeeper != yes" -->
        addSelectOption( inputActionEl, "", '\u00a0\u00a0----------', true, "gray" );
      <!--#endif -->

    if( responseObj )
    {
      var actionTemplateParent = responseObj.ActionTemplates;
      if( actionTemplateParent )
      {
        var actionTemplates = actionTemplateParent.ActionTemplate;
        if( actionTemplates )
        {
          var actionTemplateOptions = new Array();

          <!--#if expr="$doAction = modify" -->
            setSelectedActions( actionTemplates );
          <!--#endif -->
          if( actionTemplates.constructor != Array )
          {
            actionTemplates = new Array( actionTemplates );
          }
          for( var key in actionTemplates )
          {
            actionTemplateOptions = addActionTemplateOption( actionTemplates[ key ], actionTemplateOptions );
          }//for
          renderActionOptions( actionTemplateOptions, inputActionEl );
        }//if templates
      }//if template parent
    }//if respons

    initActions();
  }

  <!--#if expr="$doAction = modify" -->
    function setSelectedActions( actionTemplates )
    {
      if( actionTemplates )
      {
        if( actionTemplates.constructor != Array )
        {
          actionTemplates = new Array( actionTemplates );
        }
        for( var key in actionTemplates )
        {
          var templateId = actionTemplates[ key ].TemplateToken;
          if( actionTemplateMap[templateId] )
          {
            var webId = actionTemplateMap[templateId].val;
  
            if( actionConfig && actionConfig.TemplateToken == templateId )
            {
              renderedActions[webId].isAction = true;
            }
          }
        }//for
      }//if templates
    }
  <!--#endif -->

  function addActionTemplateOption( templateObj, actionTemplateOptions )
  {
    if( templateObj )
    {
      var templateId = templateObj.TemplateToken;
      //known template
      if( actionTemplateMap[templateId] )
      {
        var webId = actionTemplateMap[templateId].val;
        var webName = actionTemplateMap[templateId].name;

        renderedActions[webId].hasRecipient = (( templateObj.RecipientTemplate && templateObj.RecipientTemplate != "" )?true:false);

        if( !renderedActions[webId].hidden && !renderedActions[webId].initiated )
        {
          renderedActions[webId].initiated = true;

          actionTemplateOptions[ actionTemplateOptions.length ] = {Id:webId, Name:webName, SelectedAction:((renderedActions[webId].isAction)?true:false) };
        }
      }
      else 
      {
        //unknown template... Not yet implemented
      }//if known
    }//if obj
    return actionTemplateOptions;
  }

  function renderActionOptions( actionTemplateOptions, inputActionEl )
  {
    actionTemplateOptions.sort( sortByObjectName );

    var len = actionTemplateOptions.length;
    var obj;
    for( var i = 0; i < len; i++ )
    {
      obj = actionTemplateOptions[ i ];
      <!--#if expr="$gatekeeper = yes" -->
        if( obj.Id == "ptz_control" )
        {
          var labelEl = document.createElement("LABEL");
          labelEl.id = "actionTypeTxt";
          labelEl.innerHTML = obj.Name;
          document.getElementById("divActionType").appendChild(labelEl);
          document.getElementById("div_ptz_control").style.display = "block";
        
          inputActionEl.value = obj.Id;
        }
      <!--#else -->
        addSelectOption( inputActionEl, obj.Id, obj.Name, obj.SelectedAction );
      <!--#endif -->
    }
  }

  function initActions()
  {
    var theAction;
    for( var webId in renderedActions )
    {
      theAction = renderedActions[ webId ];
      if( !theAction.hidden && theAction.initiated )
      {
        <!--#if expr="$doAction = modify" -->
            <!--#if expr="$gatekeeper = yes" -->
            if( webId == "ptz_control" )
            {
            <!--#endif -->
          if( renderedActions[webId].isAction )
          {
            var paramArr;
            var params = actionConfig.Parameters.Parameter;
            if( params )
            {
              paramArr = new Array();
              if( params.constructor != Array )
              {
                params = new Array( params );
              }
              var len = params.length;
              for(var i = 0; i < len; i++ )
              {
                paramArr[ params[i].Name ] = params[i].Value;
              }
              paramArr[ "TemplateToken" ] = actionConfig.TemplateToken;
              paramArr[ "Name" ] = actionConfig.Name;
            }
            
              <!--#if expr="$gatekeeper = yes" -->
                eval( "init_"+webId+"('"+webId+"', paramArr)" );
              <!--#else -->
              if( actionConfig.Recipient )
              {
                eval( "init_"+webId+"('"+webId+"', paramArr, '"+actionConfig.Recipient+"')" );
              }
              else
              {
                eval( "init_"+webId+"('"+webId+"', paramArr)" );
              }
              toggleActionType( document.getElementById("actionType"), "none" );
              <!--#endif -->
          }
          else
          {
            eval( "init_"+webId+"('"+webId+"')" );
          }
          
            <!--#if expr="$gatekeeper = yes" -->
              }
            <!--#endif -->

        <!--#else -->
            <!--#if expr="$gatekeeper = yes" -->
              if( webId == "ptz_control" )
              {
                eval( "init_"+webId+"('"+webId+"')" );
              }
            <!--#else -->
              eval( "init_"+webId+"('"+webId+"')" );
            <!--#endif -->
        <!--#endif -->
      }
    }
  }

  var selectedActionArray = new Array();
  function toggleActionType( el, prefix )
  {
    var val = el.options[ el.selectedIndex ].value;
    var div;
    var selectedAction = selectedActionArray[ prefix ];
    var orgPrefix = prefix;
    prefix = (( prefix == "none" )?"":prefix+"_");

    if( selectedAction )
    {
      var preDiv = document.getElementById("div_"+prefix+selectedAction );
      if( preDiv )
      {
        preDiv.style.display = "none";
      }
    }
    
    var div = document.getElementById("div_"+prefix+val );
    if( div )
    {
        document.getElementById("div_"+prefix+val ).style.display = "block";
        selectedActionArray[ orgPrefix ] = val;
    }
  }

  <!--#set var="action" val="scripts" -->

      <!--#include virtual="/operator/action_send_images.shtml" -->
      <!--#include virtual="/operator/action_send_videoclip.shtml" -->
      <!--#include virtual="/operator/action_record_video.shtml" -->
  <!--#include virtual="/operator/action_notification.shtml" -->

    <!--#include virtual="/operator/action_ptz_control.shtml" -->


      <!--#if expr="$(root_PTZ_Support_S1_IrCutFilter) = true" -->
        <!--#include virtual="/operator/action_day_night_mode.shtml" -->
      <!--#endif -->

  

  <!--#include virtual="/operator/action_dynamic_overlay.shtml" -->

  var isNewRecipient = false;
  var newRecipientId = "";
  function getRecipients( added )
  {
    if( added )
    {
      isNewRecipient = true;
    }
    var params = new SOAPClientParameters();
  
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:GetRecipientConfigurations";
  
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, false, loadRecipients );
  }

  var recipients = new Array();
  var recipientsSorted = new Array();
  function loadRecipients( responseObj )
  {
    if( responseObj )
    {
      var recipientParent = responseObj.RecipientConfigurations;
      if( recipientParent )
      {
        recipientsSorted = recipientParent.RecipientConfiguration;
        if( recipientsSorted )
        {
          if( recipientsSorted.constructor != Array )
          {
            recipients.push( recipientsSorted );
            recipientsSorted = new Array( recipientsSorted );
          }
          else
          {
            recipientsSorted.sort( sortByObjectName );
            recipients = recipientsSorted;
          }
        }
        if( isNewRecipient )
        {
          isNewRecipient = false;
          var theAction;
          var recipientsSortedId = -1;
          for (var i = 0; i < recipientsSorted.length; i++)
          {
            if (recipientsSorted[i].ConfigurationID == newRecipientId)
            {
              recipientsSortedId = i;
              break;
            }
          }
          for( var webId in renderedActions )
          {
            theAction = renderedActions[ webId ];
            if( theAction.hasRecipient )
            {
              addNewRecipientOption( webId, recipientsSortedId );
            }
          }
        }
      }
    }//if response
  }

  function writeRecipientsOptions( selectEl, typeArr, selectedId, currentParam )
  {
    clearSelect( selectEl );
    selectedId = ((selectedId>=0)?selectedId:-1);
    addSelectOption( selectEl, "", '\u00a0\u00a0----------', ((selectedId==-1 && !currentParam)?true:false), "gray" );

    var recipientObj, templateId, type, recipientName;
    
    if (selectedId < 0 && currentParam)
    {
      templateId = currentParam.TemplateToken;
      var tmpArr = String( templateId ).split( "." );
      type = tmpArr[tmpArr.length - 1];
      var currentRecipient = getRecipientFromActionParam(type, currentParam);
      recipients.push(currentRecipient);
      recipientsSorted.push(currentRecipient);
      selectedId = recipients.length - 1;
    }
    if (recipientsSorted)
    {
      for( var i = 0; i < recipientsSorted.length; i++ )
      {
        recipientObj = recipientsSorted[ i ];
        templateId = recipientObj.TemplateToken;
        type = String( templateId ).replace( "com.axis.recipient.", "" );
        
        recipientName = ((recipientObj.Name)?recipientObj.Name:"");
        if( checkRecipientType( typeArr, type ) )
        {
          addSelectOption( selectEl, i+"#"+type, ( recipientName ).crop(45, "..."), ((selectedId==i)?true:false) );
        }
      }
    }
  }

  function getRecipientFromActionParam(type, actionParams)
  {
    var recipient = new Object();
    recipient.Name = getShortRecipientNameFromParam(type, actionParams);
    recipient.TemplateToken = "com.axis.recipient." + type;
    recipient.Parameters = new Object();

    var params = new Array();
    switch( type )
    {
      case "ftp":
        params.push( new Parameter("host", actionParams.host) );
        params.push( new Parameter("upload_path", actionParams.upload_path) );
        params.push( new Parameter("port", actionParams.port) );
        params.push( new Parameter("login", actionParams.login) );
        params.push( new Parameter("password", actionParams.password) );
        params.push( new Parameter("passive", actionParams.passive) );
        params.push( new Parameter("temporary", actionParams.temporary) );
        params.push( new Parameter("qos", actionParams.qos) );
        break;
      case "http":
      case "https":
        params.push( new Parameter("upload_url", actionParams.upload_url) );
        params.push( new Parameter("login", actionParams.login) );
        params.push( new Parameter("password", actionParams.password) );
        params.push( new Parameter("proxy_host", actionParams.proxy_host) );
        params.push( new Parameter("proxy_port", actionParams.proxy_port) );
        params.push( new Parameter("proxy_login", actionParams.proxy_login) );
        params.push( new Parameter("proxy_password", actionParams.proxy_password) );
        params.push( new Parameter("qos", actionParams.qos) );
        if( type == "https" )
        {
          params.push( new Parameter("validate_server_cert", actionParams.validate_server_cert) );
        }
        break;
      case "smtp":
        params.push( new Parameter("email_to", actionParams.email_to) );
        params.push( new Parameter("email_from", actionParams.email_from) );
        params.push( new Parameter("host", actionParams.host) );
        params.push( new Parameter("port", actionParams.port) );
        params.push( new Parameter("login", actionParams.login) );
        params.push( new Parameter("password", actionParams.password) );
        params.push( new Parameter("pop_host", actionParams.pop_host) );
        params.push( new Parameter("pop_port", actionParams.pop_port) );
        params.push( new Parameter("pop_login", actionParams.pop_login) );
        params.push( new Parameter("pop_password", actionParams.pop_password) );
        params.push( new Parameter("encryption", actionParams.encryption) );
        params.push( new Parameter("validate_server_cert", actionParams.validate_server_cert) );
        params.push( new Parameter("qos", actionParams.qos) );
        break;
      case "tcp":
        params.push( new Parameter("host", actionParams.host) );
        params.push( new Parameter("port", actionParams.port) );
        params.push( new Parameter("qos", actionParams.qos) );
        break;
      case "networkshare":
        params.push( new Parameter("share_id", actionParams.share_id) );
        params.push( new Parameter("upload_path", actionParams.upload_path) );
        params.push( new Parameter("qos", actionParams.qos) );
        break;
      default:
        return false;
    }
    recipient.Parameters.Parameter = params;
    return recipient;
  }

  function getShortRecipientNameFromParam(preSelectedType, params)
  {
    var str = "";
    switch(preSelectedType)
    {
      case "tcp":
        str = langObjEventsActRulSetup.getText("tcpTxt")+" ";
        str += params.host;
        break;
      case "ftp":
        str = langObjEventsActRulSetup.getText("ftpTxt")+" ";
        str += params.host;
        break;
      case "http":
        str = langObjEventsActRulSetup.getText("httpTxt")+" ";
        str += params.upload_url.replace("http:\/\/", "");
        break;
      case "https":
        str = langObjEventsActRulSetup.getText("httpsTxt")+" ";
        str += params.upload_url.replace("https:\/\/", "");
        break;
      case "smtp":
        str = params.email_to;
        break;
      case "networkshare":
        str = langObjEventsActRulSetup.getText("nsTxt")+" ";
        var nsShareId = params.share_id;
        var now = new Date();
        var timestamp = now.getTime();
        var url = "/axis-cgi/disks/networkshare/list.cgi?schemaversion=1.0&shareid="+nsShareId+"&timestamp="+timestamp;
        
        var listXml = sendAction( url, "get" );
        
        if( listXml )
        {
          xmlNode = listXml.selectSingleNode("//NetworkShare");
          if (xmlNode)
          {
            str += xmlNode.getAttribute("Address");
          }
        }

        break;
      default:
        str = langObjEventsActRulSetup.getText("unknownTxt")+" ";
        break;
    }
    return str;
  }

  var recipientBtnActionTypeId = "";
  function addNewRecipientOption( actionTypeId, id )
  {
    var recipientObj = recipients[ id ];
    var templateId = recipientObj.TemplateToken;
    var type = String( templateId ).replace( "com.axis.recipient.", "" );
    var typeArr = eval("allowedRecipientTypes_"+actionTypeId+"()");

    if( checkRecipientType( typeArr, type ) )
    {
      var selectEl = document.getElementById("recipient"+actionTypeId);
      var recipientName = ((recipientObj.Name)?recipientObj.Name:"");
      if( actionTypeId == recipientBtnActionTypeId )
      {
        addSelectOption( selectEl, id+"#"+type, ( recipientName ).crop(45, "..."), true );
        toggleRecipientsFields( selectEl );
      }
      else
      {
        addSelectOption( selectEl, id+"#"+type, ( recipientName ).crop(45, "..."), false );
      }
    }
  }

  function checkRecipientType( limitationArray, recipientType )
  {
    var isAccepted = false;
    var len = limitationArray.length;
    if( len == 0 )
    {
      isAccepted = true;
    }
    else
    {
      for( var i = 0; i < len && !isAccepted; i++ )
      {
        if( limitationArray[i] == recipientType )
        {
          isAccepted = true;
        }
      }
    }
    return isAccepted;
  }

  var recipientsArr = new Array();
  function toggleRecipientsFields( selectEl )
  {
    var id = selectEl.id;
    var selectVal = selectEl.options[selectEl.selectedIndex].value;
    
    if( recipientsArr[id] )
    {
      document.getElementById( recipientsArr[id] ).style.display = "none";
    }
    if( selectVal != "" )
    {
      var recipientType = selectVal.split("#")[1];
      recipientType = recipientType.toLowerCase();
      var visibleDivId = "div_"+id+"_"+recipientType;
      
      if( (recipientType == "ftp" || recipientType == "http" || recipientType == "https" || recipientType == "networkshare" ) && !document.getElementById( visibleDivId ) )
      {
        if(recipientType == "https" && document.getElementById( "div_"+id+"_http" ) )
          visibleDivId = "div_"+id+"_http";
        else
          visibleDivId = "div_"+id+"_ftp_http";
      }
      document.getElementById( visibleDivId ).style.display = "block";
      recipientsArr[id] = visibleDivId;
    }
  }

  var recipientTotalCnt = 0;
  function recipientSetupNew( actionTypeId )
  {
    //remove prefix
    var typeArr = eval("allowedRecipientTypes_"+actionTypeId+"()");

    recipientBtnActionTypeId = actionTypeId;
    var url = "/operator/recipient_setup.shtml?doAction=add&allowedTypes="+typeArr.join(",");
    if( recipientTotalCnt >= 10 )
    {
      alert( langObjEventsActRulSetup.getText("recipMaxAlert") );
      return;
    }
    var now = new Date();
    openPopUp( url + '&timestamp=' + now.getTime(), 'RecipientSetup', 400 , 550);
  }

  function recipientReloadList(recipientId)
  {
    newRecipientId = recipientId;
    getRecipients( true );
  }

  function toggleRecipientMaxSequence( prefix, actionTypeId )
  {
    var suffixSequenceEl = document.getElementById(prefix+"suffixSequence"+actionTypeId );
    document.getElementById(prefix+"maxSequenceNumber"+actionTypeId ).disabled = ( (suffixSequenceEl.checked)?false:true);
  }

  function addRecipientParam(arr, recipientI)
  {
    var recipientParams = recipients[recipientI].Parameters.Parameter;
    
    if (recipientParams.constructor != Array)
    {
      recipientParams = new Array(recipientParams);
    }
    for (var i = 0; i < recipientParams.length; i++)
    {
      arr.push(new Parameter(recipientParams[i].Name, recipientParams[i].Value));
    }
    return arr;
  }

  function findRecipientSortedIndex(paramArr)
  {
    var returnRecipientIndex = -1;
    if (recipientsSorted)
    {
      var isRecipientFound, paramName, paramValue;
      for( var i = 0; i < recipientsSorted.length; i++ )
      {
        isRecipientFound = true;
        var recipientParams = recipientsSorted[i].Parameters.Parameter;
        for (var param in recipientParams )
        {
          if (recipientParams.constructor != Array)
          {
            paramName = recipientParams.Name;
            paramValue = recipientParams.Value;
          }
          else
          {
            paramName = recipientParams[param].Name;
            paramValue = recipientParams[param].Value;
          }
          if (typeof(paramArr[paramName]) == "undefined" || paramArr[paramName] != paramValue)
          {
            isRecipientFound = false;
            break;
          }
        }
        if (isRecipientFound)
        {
          returnRecipientIndex = i;
          break;
        }
      }
    }
    return returnRecipientIndex;
  }

  var newScheduleId = "";
  function scheduleSetupNew()
  {
    var url = "/operator/schedule_setup.shtml?doAction=add";
    var now = new Date();
    openPopUp( url + '&timestamp=' + now.getTime(), 'ScheduleSetup', 570, 255);
  }

  function hasOpener()
  {
    if(window.opener && !window.opener.closed)
      return true;
    return false;
  }

  function addNewSchedule(name, id)
  {
    if( name != "" && id != "")
    {
      var selectEl = document.getElementById("schedule");
      var optionValue = "tns1:UserAlarm/tnsaxis:Recurring/Interval";
      var messagesPart = 'boolean(//SimpleItem[@Name="id" and @Value="'+id+'"]) and boolean(//SimpleItem[@Name="active" and @Value="1"])';

      addScheduleName( optionValue, id, [name] );

      addSelectOption( selectEl, optionValue+"#"+messagesPart, name, true );
      enable_and_sort_select( selectEl );

      if ( hasOpener() )
      {
        try
        {
          window.opener.addNewSchedule(name, id);
        }
        catch( e )
        {
        }
      }
    }
  }


  var actionRuleNames = new Array();

  var loadedActionRule;
  function getActionRuleAndNameList()
  {
    actionRuleNames = new Array();

    var params = new SOAPClientParameters();
  
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:GetActionRules";
  
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, false, loadActionRuleAndNameList );
  }

  function loadActionRuleAndNameList( responseObj )
  {
    if( responseObj )
    {
      var actionParent = responseObj.ActionRules;
      if( actionParent )
      {
        var actionRule = actionParent.ActionRule;
        if( actionRule )
        {
          if( actionRule.constructor != Array )
          {
            actionRule = new Array( actionRule );
          }
          var len = actionRule.length;
          for( var i = 0; i < len; i++ )
          {
            if( actionRule[i].RuleID == "<!--#echo var="ruleId" option="encoding:javascript" -->" )
            {
              loadedActionRule = actionRule[i];
              <!--#if expr="$copy != yes" -->
                continue;
              <!--#endif -->
            }
            if( actionRule[i].Name )
            {
              actionRuleNames[ actionRule[i].Name ] = actionRule[i].Name;
            }
          }
        }
      }
    }//if response
  }

    function writeStreamProfileOptions( selectEl, limitation, selectedProfile )
    {
      if( limitation && limitation != "" )
      {
        limitation = "videocodec="+limitation;
      }

      var selectedVal = "";
      if( selectedProfile )
      {
        selectedVal = selectedProfile.replace( "streamprofile=", "" );
      }

      var firstOption;
      var isFound;
      if( selectEl.options && selectEl.options[0] )
      {
        firstOption = selectEl.options[0];
        isFound = (selectedVal=="");
      }
      clearSelect( selectEl );
      if( firstOption )
      {
        addSelectOption( selectEl, "", firstOption.innerHTML, isFound, firstOption.className );
      }

      var form = document.profileForm;
      var len = form.elements.length;
      var profilesArray = [];
      var selectedProfile = -1;
      var el, preParamName, profileNr, params;
      for( var i = 0; i < len; i++ )
      {
        el = form.elements[i];
        if( el.name.indexOf("_Name") != -1 && el.name.indexOf("_Default") == -1 )
        {
          preParamName = el.name.substring(0, el.name.indexOf("_Name"));
          profileNr = preParamName.replace( "root_StreamProfile_S", "" );
          params = document.getElementsByName( "root_StreamProfile_S" +profileNr+ "_Parameters")[0].value;
          if( !limitation || ( limitation && params.indexOf(limitation) != -1 ) )
          {
            profilesArray[profileNr] = el.value;
            if (selectedVal == el.value)
            {
              selectedProfile = profileNr;
              isFound = true;
            }
          }
        }
      }
      
      for (var i = 0 ; i < profilesArray.length ; i++)
      {
        if (profilesArray[i])
          addSelectOption( selectEl, profilesArray[i], ( profilesArray[i] ).crop(45, "..."), ((selectedProfile == i)?true:false) );
      }
      
      if( firstOption && !isFound )
      {
        //Stream profile removed or modified
        addSelectOption( selectEl, selectedVal, "(" + selectedVal + ")", true );
      }
    }


  function getImage( actionTypeId )
  {
    var imgNumber = 0;
      <!--#if expr="$root_ImageSource_NbrOfSources = 4" -->
        var imageEls = document.getElementsByName("image_"+actionTypeId);
        var len = imageEls.length;
        for( var i = 0; i < len; i++ )
        {
          if( imageEls[i].checked )
          {
            imgNumber = imageEls[i].value;
            break;
          }
        }
      <!--#endif -->
    return parseInt( imgNumber, 10 );
  }

  function setImage( imgNumber, actionTypeId )
  {
      <!--#if expr="$root_ImageSource_NbrOfSources = 4" -->
        var imageEls = document.getElementsByName("image_"+actionTypeId);
        var len = imageEls.length;
        for( var i = 0; i < len; i++ )
        {
          if( imageEls[i].value == imgNumber )
          {
            imageEls[i].checked = true;
            break;
          }
        }
      <!--#endif -->
  }

  var AddBtnStatTxt;
  var ModBtnStatTxt;
  var RemBtnStatTxt;

  function toggleAdditionals( el )
  {
    var advContainer = document.getElementById("conditionContainer");
    if( advContainer )
    {
      advContainer.style.display = ( ( el.checked )?"block":"none" );
    }
  }

  function writeConditionList( checkForSchedule, skipfirst )
  {
    var selectEl = document.getElementById("conditionList");
    clearSelect( selectEl );
    var added = false;
    <!--#if expr="$doAction = modify" -->
      if( loadedActionRule && loadedActionRule.Conditions && loadedActionRule.Conditions.Condition )
      {
        var conditions = loadedActionRule.Conditions.Condition;
        if( conditions.constructor != Array )
        {
          conditions = new Array( conditions );
        }
        var len = conditions.length;
        var tmpObj;
        var errorStrArr = new Array();
        var checkedEvent;
        var exprTxt;
        for( var i = (( skipfirst )?1:0);  i < len; i++ )
        {
          exprTxt = conditions[i].TopicExpression["#text"];
        
          exprTxt = convertTopicExpression(exprTxt);
          
          tmpObj = getSelectedConditionProperties( exprTxt, conditions[i].MessageContent["#text"], checkForSchedule );
          if( tmpObj.names && tmpObj.names.length > 0 )
          {
            if( tmpObj.schedule )
            {
              setSelectedScheduleOption( tmpObj.schedule );
              checkForSchedule = false;
            }
            else
            {
              updateCondition( tmpObj.names, tmpObj.isActive == "1", exprTxt+"#"+conditions[i].MessageContent["#text"], -1 );
              added = true;
            }
          }
          checkedEvent = checkValidEvent(conditions[i]);
          if( !checkedEvent.isValid )
          {
            errorStrArr.push(checkedEvent.error);
          }
        }
        if( errorStrArr.length > 0 )
        {
          alert(errorStrArr.join("\n"));
        }
      }
    <!--#endif -->
    if( !added )
    {
      addSelectOption( selectEl, "", getPaddedString( '\u00a0', 72, true, true, "\u00a0" ), false );
    }
    return added;
  }

  function setSelectedScheduleOption( scheduleObj )
  {
    var selectEl = document.getElementById("schedule");
    var len = selectEl.length;
    var tmpArr, isSelected;
    for( var i = 0; i < len; i++ )
    {
      isSelected = false;
      tmpArr = ( selectEl.options[ i ].value ).split("#");
      if( tmpArr.length > 1 )
      {
        if( tmpArr[ 0 ] == scheduleObj.topic || tmpArr[ 0 ]+"//." == scheduleObj.topic )
        {
          isSelected = ((tmpArr[ 1 ].indexOf( scheduleObj.id ) != -1 )?true:false);
        }
      }
      selectEl.options[ i ].selected = isSelected;
    }
  }

  function setupCondition( action )
  {
    var btnEl = document.getElementById(action+"Btn");
    btnEl.disabled = true;

    var url = "/operator/additional_condition.shtml?doAction="+action;
    var selectEl = document.getElementById( "conditionList" );
    if( action == "modify" )
    {
      if( !checkSelectedOption( selectEl, emptyOptionAlertTxt ) )
      {
        btnEl.disabled = false;
        return;
      }
      var listIndex = selectEl.selectedIndex;
      url += '&listIndex='+listIndex+"&condition="+escape( selectEl.options[ listIndex ].value );
    }
    else
    {
        url += '&listIndex=-1';
    }

    var now = new Date();
    openPopUp( url + '&timestamp=' + now.getTime(), 'ActionRuleCondition', 580, 150);
    btnEl.disabled = false;
  }

  function updateCondition( names, active, value, listIndex )
  {
    optionValue = value;
    var topic = value.split("#")[0];
    var topicKey = topic.replace(/tns1:/ig, "").replace(/tnsaxis:/ig, "").replace(/\/\/\./g, "");
    var conditionName1 = (names.length > 0 ? names[0] : "\u00a0");
    var conditionName2 = (names.length > 1 ? names[1] : "\u00a0");
    var statusName = ( active )?activeLabel:inactiveLabel;
    
    var childNr = getGroupChildNrFromTopic(topicKey);
    if (childNr >= 0)
    {
      conditionName1 = groupArr[groupChildArr[childNr].parent].name;
      conditionName2 = groupChildArr[childNr].name;
      if (active && groupChildArr[childNr].boolean_active)
      {
        statusName = groupChildArr[childNr].boolean_active;
      }
      if (!active && groupChildArr[childNr].boolean_inactive)
      {
        statusName = groupChildArr[childNr].boolean_inactive;
      }
    }
    var optionText = "";
    optionText += getPaddedString( conditionName1, 26, true, true, "\u00a0", true );
    optionText += '\u00a0\u00a0';
    optionText += getPaddedString( conditionName2, 25, true, true, "\u00a0", true );
    optionText += '\u00a0\u00a0';
    optionText += getPaddedString( statusName, 17, true, true, "\u00a0", true );
    

    var selectEl = document.getElementById( "conditionList" );
    if( selectEl.length == 1 && selectEl.options[0].value == "")
    {
      clearSelect( selectEl );
    }

    if( listIndex < 0 || listIndex >= selectEl.length )
    {
      addSelectOption( selectEl, optionValue, optionText, false );
    }
    else
    {
      selectEl.options[ listIndex ].value = optionValue;
      selectEl.options[ listIndex ].text = optionText;
    }
  }

  function removeCondition()
  {
    var btnEl = document.getElementById("removeBtn");
    btnEl.disabled = true;

    var selectEl = document.getElementById( "conditionList" );
    if( !checkSelectedOption( selectEl, emptyOptionAlertTxt ) )
    {
      btnEl.disabled = false;
      return;
    }
    selectEl.remove( selectEl.selectedIndex );
    if( selectEl.length == 0 )
    {
      var lenEmpty = 72;
      addSelectOption( selectEl, "", getPaddedString( '\u00a0', lenEmpty, true, true, "\u00a0" ), false );
    }
    btnEl.disabled = false;
  }



  function onInit()
  {
    emptyOptionAlertTxt = langObjEventsActRulSetup.getText("removCondAlert");
    AddBtnStatTxt = langObjEventsActRulSetup.getText("addBtnStatTxt");
    ModBtnStatTxt = langObjEventsActRulSetup.getText("modBtnStatTxt");
    RemBtnStatTxt = langObjEventsActRulSetup.getText("remBtnStatTxt");

    getActionRuleAndNameList();
    var checkForSchedule = false;
    var skipFirst = false;
    <!--#if expr="$doAction = modify" -->
      checkForSchedule = true;
      
      if (!loadedActionRule)
      {
        alert( langObjEventsActRulSetup.getText("ruleNotValid1Alrt") + "<!--#echo var="ruleId" option="encoding:javascript" -->" + langObjEventsActRulSetup.getText("ruleNotValid2Alrt") );
        window.close();
        return;
      }
      
      var startEventObj = initModifyValues();
      if( !startEventObj && loadedActionRule.Conditions && loadedActionRule.Conditions.Condition )
      {
        skipFirst = true;
        var firstCondition;
        if( loadedActionRule.Conditions.Condition.constructor != Array )
        {
          firstCondition = loadedActionRule.Conditions.Condition;
        }
        else
        {
          firstCondition = loadedActionRule.Conditions.Condition[0];
        }
        startEventObj = new Object();
        startEventObj.topicExpression = convertTopicExpression( firstCondition.TopicExpression["#text"] );
        
        startEventObj.messages = parseMessageStr( firstCondition.MessageContent["#text"] );
        startEventObj.isCondition = true;
        if( startEventObj.topicExpression.indexOf("tns1:UserAlarm/tnsaxis:Recurring/Interval") != -1 )
        {
            checkForSchedule = false;
        }
      }
        getEventList( false, startEventObj, <!--#if expr="$gatekeeper = yes" -->true<!--#else -->false<!--#endif --> );
    <!--#else -->
      getEventList();
    <!--#endif -->
    var addedCondition = writeConditionList( checkForSchedule, skipFirst );
    <!--#if expr="$doAction = modify" -->
      initAdditionals( addedCondition );
    <!--#endif -->
    getRecipients();
    <!--#if expr="$doAction = modify" -->
      getActionConfigs();
      checkIfAllEventsAreValid();
    <!--#endif -->
    getActionsTemplates();
  }
  addLoadEvent( onInit );

  <!--#if expr="$doAction = modify" -->
    function convertTopicExpression(expression)
    {
      var convertArr = new Array();
      convertArr.push( { oldExp: "tnsaxis:Storage/Disruption", newExp: "tns1:Storage/tnsaxis:Disruption"} );
      convertArr.push( { oldExp: "tnsaxis:Storage/Recording", newExp: "tns1:Storage/tnsaxis:Recording"} );
      convertArr.push( { oldExp: "tnsaxis:CameraApplicationPlatform/", newExp: "tns1:CameraApplicationPlatform/tnsaxis:"} );
    
      for(var i=0; i < convertArr.length; i++)
      {
        if(expression.indexOf(convertArr[i].oldExp) > -1)
        {
          return expression.replace(convertArr[i].oldExp, convertArr[i].newExp);
        }
      }
      return expression.replace(/\/\/\./g, "");
    }
  
    function initModifyValues()
    {
      document.getElementById( "ruleName" ).value = loadedActionRule.Name;
        <!--#if expr="$gatekeeper = yes" -->
            document.getElementById( "ruleName" ).disabled = true;
        <!--#endif -->
      document.getElementById( "enableRule" ).checked = (loadedActionRule.Enabled == "true");
      var startEventObj;
      
      if( loadedActionRule.StartEvent && loadedActionRule.StartEvent.TopicExpression)
      {
        startEventObj = new Object();
        startEventObj.topicExpression = convertTopicExpression( loadedActionRule.StartEvent.TopicExpression["#text"] );
        
        if( loadedActionRule.StartEvent.MessageContent)
        {
          startEventObj.messages = parseMessageStr( loadedActionRule.StartEvent.MessageContent["#text"] );
        }
      }
      return startEventObj;
    }

    function initAdditionals( addedCondition )
    {
      if( loadedActionRule.ActivationTimeout )
      {
        var intervalStr = loadedActionRule.ActivationTimeout;
        var tmpArr = new Array( "00", "00", "00" )
        var interval = parseInt( intervalStr.replace("PT", ""), 10 );
        if( interval/3600 >= 1 )
        {
          var h = Math.floor( interval/3600 );
          tmpArr[ 0 ] = ( ( h < 10 )?"0"+h:h );
          interval = interval - h * 3600;
        }

        if( interval/60 >= 1 )
        {
          var m = Math.floor( interval/60 );
          tmpArr[ 1 ] = ( ( m < 10 )?"0"+m:m );
          interval = interval - m * 60;
        }
        tmpArr[ 2 ] =  ( ( interval < 10 )?"0"+interval:interval ) ;
        
        document.getElementById( "minimumTriggerInterval" ).value = tmpArr.join(":");
        addedCondition = true;
      }

      if( addedCondition )
      {
        var addEl = document.getElementById( "addCondition" );
        addEl.checked = true;
        toggleAdditionals( addEl );
      }
    }
  
    function checkIfAllEventsAreValid()
    {
      var checkedEvents = new Array();
      if( loadedActionRule.StartEvent )
      {
        checkedEvents.push( checkValidEvent(loadedActionRule.StartEvent) );
      }
      if( loadedActionRule.Conditions && loadedActionRule.Conditions.Condition )
      {
        var conditions = loadedActionRule.Conditions.Condition;
        if (conditions.constructor != Array)
        {
          conditions = new Array( conditions );
        }
        for( var i = 0; i < conditions.length; i++ )
        {
          checkedEvents.push( checkValidEvent( conditions[i] ) );
        }
      }
      var isValid = true;
      var errors = new Array();
      for( var i = 0; i < checkedEvents.length; i++ )
      {
        isValid &= checkedEvents[i].isValid;
        if( !checkedEvents[i].isValid )
        {
          errors.push( checkedEvents[i].error );
        }
      }
      if( !isValid )
      {
        alert( langObjEventsActRulSetup.getText("invalidEventAlrt") + errors.join("\n") );
      }
    }
  <!--#endif -->

  function toggleCheckedEnable( el, enableId )
  {
    document.getElementById( enableId ).disabled = ( (el.checked)?false:true );
  }

  function closeWindow()
  {
    window.close();
  }

  var saveStatus;
  var actionRuleSetup;
  var actionType;
  var action_queue;
  var isSaving = false;
  function saveData()
  {
    if (isSaving)
      return;
    isSaving = true;
    var okBtn = document.getElementById("btnOK");
    okBtn.disabled = true;
    okBtn.setAttribute("disabled", "disabled");  // Really disable the button

    actionRuleSetup = new Object();
    var nameEl = document.getElementById("ruleName");
    var theName = ( nameEl.value ).trim();

    if( theName == "" )
    {
      showErrorMsg( langObjEventsActRulSetup.getText("nameAlert"), nameEl );
      okBtn.disabled = false;
      okBtn.removeAttribute("disabled");
      isSaving = false;
      return;
    }
      <!--#if expr="$checkReservedName = yes" -->
        else if( theName.toLowerCase() == ("<!--#echo var="reservedName" option="encoding:javascript" -->").toLowerCase() )
        {
          showErrorMsg( langObjEventsActRulSetup.getText("nameGatekeeperAlert"), nameEl );
          okBtn.disabled = false;
          okBtn.removeAttribute("disabled");
          isSaving = false;
          return;
        }
      <!--#endif -->
    else if( actionRuleNames[ theName ] )
    {
      if( !confirm( langObjEventsActRulSetup.getText("nameConfirm1")+" \""+theName+"\".\n\n"+langObjEventsActRulSetup.getText("nameConfirm2")) )
      {
        nameEl.focus();
        nameEl.select();
        okBtn.disabled = false;
        okBtn.removeAttribute("disabled");
        isSaving = false;
        return;
      }
    }

    actionRuleSetup.Name = theName;
    actionRuleSetup.Enabled = document.getElementById("enableRule").checked;

    //Validations

    var groupEl = document.getElementById("groupParent");
    var scheduleEl = document.getElementById("schedule");
    var selectedValue = selectedTopic[ selectedTopic.length - 1 ];
    var selectedSchedule = scheduleEl.options[ scheduleEl.selectedIndex ].value;
    if( groupEl.options[ groupEl.selectedIndex ].value == "" && selectedSchedule == "" )
    {
      alert( langObjEventsActRulSetup.getText("triggerScheduleAlert") );
      groupEl.focus();
      okBtn.disabled = false;
      okBtn.removeAttribute("disabled");
      isSaving = false;
      return false;
    }
    else if( selectedValue == "tns1:UserAlarm/tnsaxis:Recurring/Interval" && selectedSchedule == "" )
    {
      alert( langObjEventsActRulSetup.getText("scheduleAlwaysAlert") );
      groupEl.focus();
      okBtn.disabled = false;
      okBtn.removeAttribute("disabled");
      isSaving = false;
      return false;
    }

    var hasAddCondtions = document.getElementById( "addCondition" ).checked;
    var triggerInterval = document.getElementById( "minimumTriggerInterval" );
    if( hasAddCondtions )
    {
      var timeRegEx = /^(\d{2}):(\d{2})(:(\d{2}))$/;
      var matchString = triggerInterval.value.match(timeRegEx);

      if( matchString == null )
      {
        showErrorMsg( langObjEventsActRulSetup.getText("enIntervalAlert"), triggerInterval );
        okBtn.disabled = false;
        okBtn.removeAttribute("disabled");
        isSaving = false;
        return;
      }
      if( matchString[1]>23 || matchString[1]<0 || matchString[2]>59 || matchString[2]<0 || matchString[4]>59 || matchString[4]<0 )
      {
        showErrorMsg( langObjEventsActRulSetup.getText("inIntervalAlert"), triggerInterval );
        okBtn.disabled = false;
        okBtn.removeAttribute("disabled");
        isSaving = false;
        return;
      }
    }
    
    if( selectedValue == "INVALID_EVENT" )
    {
      showErrorMsg( langObjEventsActRulSetup.getText("selEvntInvalTxt") );
      okBtn.disabled = false;
      return;
    }

    var filterObj;
    var isCondition = false;

    if( selectedValue != "" )
    {
      filterObj = getSelectedTopicFilter();
      isCondition = filterObj.isCondition;
    }
    else
    {
      isCondition = ( selectedSchedule != "" );
      if( hasAddCondtions )
      {
        isCondition = isCondition || (document.getElementById( "conditionList" ).length > 0);
      }
    }


    var isActionWhileActive = false;
      <!--#if expr="$gatekeeper = yes" -->
        actionType = document.getElementById("actionType").value;
        if( !eval( "validate_"+actionType+"('" + actionType + "', " + isCondition + " )" ) )
        {
          okBtn.disabled = false;
          okBtn.removeAttribute("disabled");
          isSaving = false;
          return false;
        }
        isActionWhileActive |= eval( "is_action_while_active" + actionType + "('" + actionType+ "')" )
      <!--#else -->
    actionType = selectedActionArray[ "none" ];
    if( actionType )
    {
    if( !eval( "validate_"+actionType+"('"+actionType+"', " + isCondition + " )" ) )
      {
        okBtn.disabled = false;
        okBtn.removeAttribute("disabled");
        isSaving = false;
        return false;
      }
      isActionWhileActive |= eval( "is_action_while_active" + actionType + "('" + actionType + "')" )
    }
    else
    {
      alert( langObjEventsActRulSetup.getText("alertNoAction") );
      document.getElementById("actionType").focus();
      okBtn.disabled = false;
      okBtn.removeAttribute("disabled");
      isSaving = false;
      return false;
    }
      <!--#endif -->

    // it is possible that the rule gets disabled, after validation of rule trigger.
    actionRuleSetup.Enabled = document.getElementById("enableRule").checked;

    //Prepare soap call
    var startEvent;
    var conditionArray = new Array();
    if( groupEl.options[ groupEl.selectedIndex ].value != "" && selectedValue != "tns1:UserAlarm/tnsaxis:Recurring/Interval" )
    {
      if( filterObj.isCondition )
        conditionArray[ conditionArray.length ] = { "Condition":filterObj.topicFilter };
      else
        startEvent = filterObj.topicFilter;
    }

    if( selectedSchedule != ""  )
    {
      var tmpArr = selectedSchedule.split("#");
      var filterCondtionObj = getTopicFilterObject( tmpArr[0], tmpArr[1] );
      conditionArray[ conditionArray.length ] = { "Condition":filterCondtionObj };
    }

    //Other conditions....
    if( hasAddCondtions )
    {
      var conditionEl = document.getElementById( "conditionList" );
      var len = conditionEl.length;
      var conditionVal;
      for( var i = 0; i < len; i++ )
      {
        conditionVal = conditionEl.options[ i ].value;
        if( conditionVal != "" )
        {
          var tmpArr = conditionVal.split("#");
          var filterCondtionObj = getTopicFilterObject( tmpArr[0], tmpArr[1] );
          conditionArray[ conditionArray.length ] = { "Condition":filterCondtionObj };
        }
      }
      if( triggerInterval.value != "00:00:00" )
      {
        var tmpArray = ( triggerInterval.value ).split(':');
        actionRuleSetup.ActivationTimeout = "PT"+parseInt(tmpArray[0],10)+"H"+parseInt(tmpArray[1],10)+"M"+parseInt(tmpArray[2],10)+"S";
      }
    }

    if( !isActionWhileActive && !startEvent && conditionArray.length == 1 )
    {
      actionRuleSetup.StartEvent = conditionArray[0].Condition;
    }
    else
    {
      if( startEvent )
      {
        actionRuleSetup.StartEvent = startEvent;
      }

      if( conditionArray.length > 0 )
      {
        actionRuleSetup.Conditions = conditionArray;
      }
    }
    <!--#if expr="$doAction = modify" -->
      if( failoverActionConfig )
      {
        actionRuleSetup.FailoverAction = failoverActionConfig;
      }
    <!--#endif -->

    action_queue = new Array();
    <!--#if expr="$copy != yes" -->
      removeSaved( loadedActionRule );
    <!--#endif -->
    if( actionType )
      action_queue.push( "saveActionConfig('" + actionType + "', 'PrimaryAction')" );
    action_queue.push( "saveRule()" );
    action_queue.push( "enableOkBtn()" );

    eval(action_queue.shift());
  }

  var saveActionConfig_status;
  function saveActionConfig( actionTypeId, actionConfig_status )
  {
    saveActionConfig_status = actionConfig_status;
    var paramObj = eval( "setup_save_"+actionType+"('"+actionTypeId+"')" );

    var soapParamObj = new SOAPClientParameters();
    soapParamObj.add("NewActionConfiguration", paramObj);

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
  
    var url = "/vapix/services"+timestamp;
    var method = "aa:AddActionConfiguration";
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, soapParamObj, true, onSaveActionConfig );
  }

  function Parameter( name, value )
  {
    name = name.setIsAttribute( true );
    this.Name = name;

    value = value.setIsAttribute( true );
    this.Value = value;

    return this;
  }

  function onSaveActionConfig( responseObj )
  {
    if( responseObj )
    {
      if( responseObj.name == "Error" )
      {
        var errorMsg = ( ( responseObj.description )?responseObj.description:(responseObj.fileName)?responseObj.fileName:responseObj.message );
        alert( errorMsg );
        removeSaved( actionRuleSetup );
        action_queue.push( "enableOkBtn()" );
      }
      else
      {
        var newId = responseObj.ConfigurationID;
        actionRuleSetup.PrimaryAction = newId;
      }
    }//if response
    else
    {
      alert( langObjEventsActRulSetup.getText("unknownErrorAlert") );
      removeSaved( actionRuleSetup );
      action_queue.push( "enableOkBtn()" );
    }

    eval(action_queue.shift());

  }

  function saveRule()
  {
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
  
    var url = "/vapix/services"+timestamp;
    var method = "aa:AddActionRule";

    var params = new SOAPClientParameters();
    params.add( "NewActionRule", actionRuleSetup );

    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, true, onSaveRule );
  }

  var removeStatus;
  var newRuleId;
  function onSaveRule( responseObj )
  {
    if( responseObj )
    {
      if( responseObj.name == "Error" )
      {
        var errorMsg = ( ( responseObj.description )?responseObj.description:(responseObj.fileName)?responseObj.fileName:responseObj.message );
        alert( errorMsg );
        removeSaved( actionRuleSetup );
        action_queue.push( "enableOkBtn()" );
        eval(action_queue.shift());
        return;
      }
      newRuleId = responseObj.RuleID;
    }
    finishSave();
  }
  function removeRule( ruleId )
  {
    var params = new SOAPClientParameters();
    params.add("RuleID", ruleId );

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:RemoveActionRule";
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, true, onRemoveRule );
  }

  function onRemoveRule( responseObj )
  {
    if( responseObj )
    {
      if( responseObj.name == "Error" )
      {
        var errorMsg = ( ( responseObj.description )?responseObj.description:(responseObj.fileName)?responseObj.fileName:responseObj.message );
        alert( errorMsg );
        return;
      }
    }//if response

    eval(action_queue.shift());
  }

  function finishSave()
  {
    document.getElementById("btnOK").disabled = false;
    if ( hasOpener() )
    {
      try
      {
        window.opener.reloadList();
      }
      catch( e )
      {
      }
    }
    window.close();
  }

  function removeActionConfigs( actionId )
  {
    var params = new SOAPClientParameters();
    params.add("ConfigurationID", actionId );

    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var url = "/vapix/services"+timestamp;
    var method = "aa:RemoveActionConfiguration";
    SOAPClient.invoke( wsdlUrl, url, actionNameSpaces, method, params, true, onRemoveActionConfigs );
  }

  function onRemoveActionConfigs( responseObj )
  {
    var hasError = false;
    if( responseObj )
    {
      if( responseObj.name == "Error" )
      {
        var errorMsg = ( ( responseObj.description )?responseObj.description:(responseObj.fileName)?responseObj.fileName:responseObj.message );
        alert( errorMsg );
        hasError = true;
      }
    }//if response

    eval(action_queue.shift());
  }

  function removeSaved( ar )
  {
    action_queue = new Array();
    if( ar )
    {
      if( ar.RuleID )
        action_queue.push( "removeRule(" + ar.RuleID + ")" );
      if( ar.PrimaryAction )
        action_queue.push( "removeActionConfigs(" + ar.PrimaryAction + ")" );
    }
  }

  function enableOkBtn()
  {
    document.getElementById("btnOK").disabled = false;
  }

  function showErrorMsg( msg, focusOn )
  {
    alert( msg );
    if( focusOn )
    {
      focusOn.focus();
      focusOn.select();
    }
  }
// -->
</script>
