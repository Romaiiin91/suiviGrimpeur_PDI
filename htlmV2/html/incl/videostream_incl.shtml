var langObjVidStrIncl = new Language("videostream", "videostream_incl");
langObjVidStrIncl.init(false, true);

  <!--#if expr="$root_Brand_ProdType = Network Camera" -->


function setSelectedResolution( selectEl, resValue )
{
  var optionColl = selectEl.options;
  var len = optionColl.length;
  var found = false;
  for( var i = 0; i < len; i++ )
  {
    if( optionColl[i].value == resValue )
    {
      found = true;
      optionColl[i].selected = true;
    }
    else
    {
      optionColl[i].selected = false;
    }
  }

  return resValue;
}
<!--#else -->
function setCorrectResolution(theRes)
{
  if (theRes == "1408x960" || theRes == "1408x1152" || theRes == "1280x960" || theRes == "1536x1152") {
    theRes = "16CIF";
  } else if (theRes == "1024x768") {
    theRes = "XGA";
  } else if (theRes == "752x480" || theRes == "736x576") {
    theRes = "ExtendedD1";
  } else if (theRes == "720x480" || theRes == "720x576") {
    theRes = "D1";
  } else if (theRes == "704x480" || theRes == "704x576" || theRes == "640x480" || theRes == "768x576") {
    theRes = "4CIF";
  } else if (theRes == "640x240" || theRes == "768x288" || theRes == "704x240" || theRes == "704x288") {
    theRes = "2CIF";
  } else if (theRes == "320x240" || theRes == "384x288" || theRes == "352x240" || theRes == "352x288") {
    theRes = "CIF";
  } else if (theRes == "160x120" || theRes == "192x144" || theRes == "176x120" || theRes == "176x144") {
    theRes = "QCIF";
  }
  return theRes;
}
<!--#endif -->

function resolutionText(resValue, isSquarePixelEnabled, detectedType)
{
  var text = "";
  if (isSquarePixelEnabled) {
    switch (resValue) {
      case "16CIF":
        switch (detectedType) {
          case "NTSC": text = "16CIF (1280 x 960)"; break;
          case "PAL":  text = "16CIF (1536 x 1152)"; break;
          default:     text = "16CIF (1280 x 960/1536 x 1152)"; break;
        }; break;
      case "XGA":
        text = "XGA (1024 x 768)";
        break;
      case "D1":
        switch (detectedType) {
          case "NTSC": text = "D1 (640 x 480)"; break;
          case "PAL":  text = "D1 (768 x 576)"; break;
          default:     text = "D1 (640 x 480/768 x 576)"; break;
        }; break;
      case "4CIF":
        switch (detectedType) {
          case "NTSC": text = "4CIF (640 x 480)"; break;
          case "PAL":  text = "4CIF (768 x 576)"; break;
          default:     text = "4CIF (640 x 480/768 x 576)"; break;
        }; break;
      case "2CIFEXP":
        switch (detectedType) {
          case "NTSC": text = "2CIF Expanded (640 x 480)"; break;
          case "PAL":  text = "2CIF Expanded (768 x 576)"; break;
          default:     text = "2CIF Expanded (640 x 480/768 x 576)"; break;
        }; break;
      case "2CIF":
         switch (detectedType) {
          case "NTSC": text = "2CIF (640 x 240)"; break;
          case "PAL":  text = "2CIF (768 x 288)"; break;
          default:     text = "2CIF (640 x 240/768 x 288)"; break;
        }; break;
      case "CIF":
        switch (detectedType) {
          case "NTSC": text = "CIF (320 x 240)"; break;
          case "PAL":  text = "CIF (384 x 288)"; break;
          default:     text = "CIF (320 x 240/384 x 288)"; break;
        }; break;
      case "QCIF":
        switch (detectedType) {
          case "NTSC": text = "QCIF (160 x 120)"; break;
          case "PAL":  text = "QCIF (192 x 144)"; break;
          default:     text = "QCIF (160 x 120/192 x 144)"; break;
        }; break;
      default: break;
    }
  } else {
    switch (resValue) {
      case "16CIF":
        switch (detectedType) {
          case "NTSC": text = "16CIF (1280 x 960)"; break;
          case "PAL":  text = "16CIF (1536 x 1152)"; break;
          default:     text = "16CIF (1280 x 960/1536 x 1152)"; break;
        }; break;
      case "XGA":
        text = "XGA (1024 x 768)";
        break;
      case "D1":
        switch (detectedType) {
          case "NTSC": text = "D1 (720 x 480)"; break;
          case "PAL":  text = "D1 (720 x 576)"; break;
          default:     text = "D1 (720 x 480/720 x 576)"; break;
        }; break;
      case "4CIF":
        switch (detectedType) {
          case "NTSC": text = "4CIF (704 x 480)"; break;
          case "PAL":  text = "4CIF (704 x 576)"; break;
          default:     text = "4CIF (704 x 480/704 x 576)"; break;
        }; break;
      case "2CIFEXP":
        switch (detectedType) {
          case "NTSC": text = "2CIF Expanded (704 x 480)"; break;
          case "PAL":  text = "2CIF Expanded (704 x 576)"; break;
          default:     text = "2CIF Expanded (704 x 480/704 x 576)"; break;
        }; break;
      case "2CIF":
        switch (detectedType) {
          case "NTSC": text = "2CIF (704 x 240)"; break;
          case "PAL":  text = "2CIF (704 x 288)"; break;
          default:     text = "2CIF (704 x 240/704 x 288)"; break;
        }; break;
      case "CIF":
        switch (detectedType) {
          case "NTSC": text = "CIF (352 x 240)"; break;
          case "PAL":  text = "CIF (352 x 288)"; break;
          default:     text = "CIF (352 x 240/352 x 288)"; break;
        }; break;
      case "QCIF":
        switch (detectedType) {
          case "NTSC": text = "QCIF (176 x 120)"; break;
          case "PAL":  text = "QCIF (176 x 144)"; break;
          default:     text = "QCIF (176 x 120/176 x 144)"; break;
        }; break;
    }
  }
  return text;
}


var hasError = false;
function searchIllegal(txt)
{
  var textScript=new Array(5)

  textScript[0]="<SCRIPT"
  textScript[1]="<OBJECT"
  textScript[2]="<APPLET"
  textScript[3]="<EMBED"
  textScript[4]="<FORM"
  txt=txt.toUpperCase()
  for (i=0;i<=4;i++){
    if (txt.indexOf(textScript[i])!=-1)
        return 1
  }
  return 0
}

function checkForScript(el, theTab)
{
  var errorMessage = langObjVidStrIncl.getText("inValAlrt");

  hasError = false;
  if (searchIllegal(el.value)==1)
  {
    if(document.getElementById(theTab).style.display == 'none') showTab(theTab);
    alert(errorMessage);
    el.focus();
    el.select();
    hasError = true;
  }
  return;
}

function reloadPage()
{
  var tabid = shownTab();
  if (tabid == "") tabid = "image";

  window.location = document.location.pathname + "?nbr=<!--#echo var="nbr" option="encoding:url" -->&id=<!--#echo var="ssi_request_id" option="encoding:url" --><!--#if expr="$basic = yes" -->&basic=yes<!--#endif -->&tabid=" + tabid
}

function getParam(param)
{
  var paramList = getParamList();
  return paramList[param.toLowerCase()];
}

var globalParamList = null;
function getParamList()
{
  if( globalParamList == null )
  {
    var now = new Date();
    var timestamp = now.getTime();
    
    var ajaxRequest = AxisConnectionFactory.createAjaxConnection();
    var params = ["root.Layout.DefaultStreamProfile",
                  "root.Image.OverlayPath",
                    "root.Image.I0.Name",
                    "root.Image.I0.Text.String",
                  "root.StreamProfile",
                  "root.GuardTour"];

    var url = "/axis-cgi/operator/param_authenticate.cgi?action=list&responsecharset=utf8&group=" + params.join(",") + "&timestamp=" + now.getTime();
    AxisConnectionFactory.sendSync(["GET", url], null, ajaxRequest);

    if( ajaxRequest.getStatus() == 200 )
    {
      var resp = ajaxRequest.getResponseText();
      if( resp )
      {
        var arr = resp.split("\n");
        var param, val, index;
        globalParamList = new Array();
        for( var i = 0; i < arr.length; i++)
        {
          index = arr[i].indexOf("=");
          param = arr[i].slice(0, index);
          val = arr[i].slice(index+1);
          globalParamList[param.toLowerCase()] = val;
        }
      }
      else
        globalParamList = new Array();
    }
    else
      return null;
  }
  
  return globalParamList;
}

function setOvlText(ovlText)
{
  var reqInputStr = encodeURIComponent(ovlText);
  
  var now = new Date();
  var timestamp = now.getTime();

  var ajaxRequest = AxisConnectionFactory.createAjaxConnection();
  var url = "/axis-cgi/operator/param_authenticate.cgi?action=update&Image.I<!--#echo var="nbr" option="encoding:javascript" -->.Text.String=" + reqInputStr + "&timestamp=" + now.getTime();
  AxisConnectionFactory.sendSync(["GET", url], null, ajaxRequest);
}
