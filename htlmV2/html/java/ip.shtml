<script language="JavaScript">
<!--
var langObjJavaIP = new Language("java_common", "ip");
langObjJavaIP.init(false, true);

function IPAddressMulticastCheck(theControl)
{
  var anError = false;

  if (theControl.value.length == 0)
    theControl.value = '0.0.0.0';

  if (valid_v4(theControl.value)) {
    var aTmp = theControl.value.split(".");
    if(aTmp[0]<224 || aTmp[0]>239)
      anError = true;
  } else {
    anError = true;
  }

  if (anError) {
    theControl.focus();
    theControl.select(); 
    alert( langObjJavaIP.getText("ipPlSpMultiCaAlrt") );
    return 1;
  } else {
    // The IP syntax is correct.
    return 0;
  }
}

function IPv6AddressMulticastCheck(theControl)
{
  var anError = false;

  if (theControl.value.length == 0)
    theControl.value = '0:0:0:0:0:0:0:0';

  if (valid_v6(theControl.value)) {
    var aTmp = theControl.value.split(":");
    var re = new RegExp("[A-Fa-f0-9]");
    
    if(aTmp[0].substr(0,2).toLowerCase() != "ff" || (aTmp[0].substr(2,1) != 0 && aTmp[0].substr(2,1) != 3 ) || re.exec( aTmp[0].substr(3,1) ) == null )
      anError = true;
  } else {
    anError = true;
  }

  if (anError) {
    theControl.focus();
    theControl.select();
    alert( langObjJavaIP.getText("ipPlSpMultiCaAlrt2") );
    return 1;
  } else {
    // The IP syntax is correct.
    return 0;
  }
}

function IPAddressCheck(theControl)
{
  var anError = false;

  if (theControl.value.length == 0)
    theControl.value = '0.0.0.0';

  if (!valid_v4(theControl.value))
    anError = true;

  if (anError) {
    theControl.focus();
    theControl.select();
    alert( langObjJavaIP.getText("ipPlSpFormatAlrt") );
    return 1;
  } else {
    // The IP syntax is correct.
    return 0;
  }
}


function checkIPbounds(IPfield, SubnetMaskField)
{
  var IPstring = IPfield.value;
  if ((IPstring == "0.0.0.0") || (IPstring == "255.255.255.255")) {
    if (!confirm( langObjJavaIP.getText("ipThValAlrt")+" "+ IPstring +" "+langObjJavaIP.getText("ipUnrechableIPAlrt") )) {
      IPNumberOK = false;
      IPfield.focus();
      IPfield.select();
      return 0;
    }
  }

  if( SubnetMaskField )
  {
    maskString = SubnetMaskField.value;
    var maskParts = maskString.split(".");
    var ipParts = IPstring.split(".");
    var mp;

    for (var i=0;i<4;i++)
    {
      mp = parseInt(maskParts[i], 10);
      if((mp != 0 && mp != 255))
      {
        if(!( mp == 128 || mp == 192 || mp == 224 || mp == 240 || mp == 248 || mp == 252 || mp == 254 ))
        {
          alert( langObjJavaIP.getText("ipIncorrSMAlrt")+" "+maskString);
          SubnetMaskField.focus();
          SubnetMaskField.select();
          return 0;
        }
      }
    }

    var brodcastIpAddr = new Array(4);
    var networkIpAddr = new Array(4);
    for( var j = 0; j < 4; j++ )
    {
      brodcastIpAddr[j] = (255-maskParts[j]) | parseInt(ipParts[j], 10);
      networkIpAddr[j] = maskParts[j] & parseInt(ipParts[j], 10);
    }

    if( IPstring == networkIpAddr.join(".") &&
        !confirm( langObjJavaIP.getText("ipBinZeroIPAlrt") ) )
    {
      IPNumberOK = false;
      IPfield.focus();
      IPfield.select();
      return 0;
    }
    if( IPstring == brodcastIpAddr.join(".") &&
        !confirm( langObjJavaIP.getText("ipBroadCastIPAlrt") ) )
    {
      IPNumberOK = false;
      IPfield.focus();
      IPfield.select();
      return 0;
    }
  }
  return 1;
}


var IPNumberOK = true;

function checkIPnumber(IPfield, emptyAllowed)
{
  var IPstring = IPfield.value;
  var str = IPstring;
  var partOfIP;
  var index;

  if ((emptyAllowed) && (IPstring == ""))
    return 1;

  for (i=0; i<4; i++) {
    index = str.indexOf(".");
    if (i == 3) {  // last number
      partOfIP = str;
      if (partOfIP.indexOf(".") != -1) {
        alert( langObjJavaIP.getText("ipToMaIntIPAlrt") );
        IPNumberOK = false;
        IPfield.focus();
        IPfield.select();
        return 0;
      }
    } else {
      if (index == -1) {
        alert( langObjJavaIP.getText("ipFourIntsIPAlrt") );
        IPNumberOK = false;
        IPfield.focus();
        IPfield.select();
        return 0;
      }
      partOfIP = str.substr(0, index);
    }

    IPinteger = parseInt(partOfIP,10);

    if (((isNaN(Number(partOfIP))) || isNaN(IPinteger))<!--#if expr="$2460-type = yes" --> && (partOfIP != "*")<!--#endif -->) {
      alert( langObjJavaIP.getText("ipEachPartIPAlrt") );
      IPNumberOK = false;
      IPfield.focus();
      IPfield.select();
      return 0;
    }
    if (IPinteger <0 || IPinteger > 255) {
      alert( langObjJavaIP.getText("ipEachPartIPAlrt") );
      IPNumberOK = false;
      IPfield.focus();
      IPfield.select();
      return 0;
    }
    str = str.substr(index+1, str.length-index-1);
  }
  return 1;
}


function checkSubnetMask(MaskField)
{
  if (!checkSubnetMaskValue(MaskField.value)) {
    MaskField.focus();
    MaskField.select();
    return 0;
  }

  return 1;
}

function checkSubnetMaskValue(mask)
{
  var MaskInteger = new Array(4);
  var asciiMask   = new Array();
  var TotalMaskInteger;
  var posForOne;
  var compare;
  
  asciiMask = mask.split('.');
  if(asciiMask.length != 4) {
    alert( langObjJavaIP.getText("ipFourIntSMAlrt") );
    return 0;
  }
  for(i=0; i<4; i++) {
    MaskInteger[i] = parseInt(asciiMask[i], 10);
    if (isNaN(MaskInteger[i])) {
      alert( langObjJavaIP.getText("ipEachPartSMAlrt") );
      return 0;
    }
    if (MaskInteger[i] < 0 || MaskInteger[i] > 255) {
      alert( langObjJavaIP.getText("ipEachPartSMAlrt") );
      return 0;
    }
  }

  TotalMaskInteger = MaskInteger[3] + MaskInteger[2]*256 + MaskInteger[1]*256*256 + MaskInteger[0]*256*256*256;

  if ((TotalMaskInteger&1) == 1) {
    alert( langObjJavaIP.getText("ipIncorrSM2Alrt") );
    return 0;
  }
  
  if (TotalMaskInteger == 0 || (MaskInteger[0] == 255 && MaskInteger[1] == 255 && MaskInteger[2] == 255 && MaskInteger[3] == 254)) {
  	if (!confirm( langObjJavaIP.getText("ipUnrechableSMAlrt") )) {
		return 0;
    }
  }

  compare = 2;
  for (i=2; i<33; i++) {
    if ((TotalMaskInteger&compare) == compare) {
      posForOne = i;
      break;
    }
    compare = compare<<1;
  }
  compare = compare<<1;

  for (i=posForOne+1; i<33; i++) {
    if ((TotalMaskInteger&compare) == 0) {
      alert( langObjJavaIP.getText("ipIncorrSM2Alrt") );
      return 0;
    }
    compare = compare<<1;
  }

  return 1;
}


var ADDR_ALLOW_EMPTY = 0x01;
var ADDR_IP_ONLY     = 0x02;
var V4_INADDRSZ      = 4;
var V6_INADDRSZ      = 16;

function checkValidAddress(address,flags)
{

  if (address.length >= 256)
  {
    return false;
  }


  if (address.length == 0)
  {
    return ((flags & ADDR_ALLOW_EMPTY) != 0);
  }

  if (valid_v4(address))
  {
    return 4;
  }

  if (valid_v6(address))
  {
    return 6;
  }

  if (flags & ADDR_IP_ONLY)
  {
    return false;
  }

  if (address.search(/^([0-9a-zA-Z_](([0-9a-zA-Z_-]*[0-9a-zA-Z_]+)*\.?))*$/) == -1)
  {
    return false;
  }

  var name_array = address.split(".");

  if (name_array.length > 1 && (name_array[name_array.length-1] == "" ||
      name_array[name_array.length-1].search(/^[0-9]([0-9]*[0-9])?$/) == 0))
  {
    return false;
  }

  return true;
}

function valid_v4(ip)
{
  var digits = "0123456789";
  var octets = 0;
  var saw_digit = false;
  var sum = 0;
  var ch;


  for (var i = 0; i < ip.length; i++) 
  {
    ch = ip.charAt(i);
    if (digits.indexOf(ch) != -1)
    {
      var tmp;
      tmp = sum * 10 + parseInt(ch,10);
      if (tmp > 255)
      {
        return false;
      }

      sum = tmp;

      if (!saw_digit)
      {
        if (++octets > V4_INADDRSZ)
        {
          return false;
        }
        saw_digit = true;
      }
    }
    else if (ch == '.' && saw_digit)
    {
      if (octets == V4_INADDRSZ)
      {
        return false;
      }
      sum = 0;
      saw_digit = false;
    }
    else
    {
      return false;
    }
  }

  if (octets < V4_INADDRSZ)
  {
    return false;
  }

  return true;
}

function valid_v6(ip)
{
  var digits = "0123456789abcdef";
  var saw_digit = false;
  var val = 0;
  var colonp = -1;
  var i = 0;
  var j = 0;
  var len;
  var letter1;
  var curtok;
  var ch;

  if ((letter1 = ip.charAt(i)) == ':')
  {
    if ((letter1 = ip.charAt(i++)) != ':')
    {
      return false;
    }
  }

  curtok = i;

  while (i < ip.length)
  {
    ch = ip.charAt(i).toLowerCase();
    i++;
    if ((len = digits.indexOf(ch)) != -1)
    {
      val <<= 4;
      val |= len;
      if (val > 0xffff)
      {
        return false;
      }
      saw_digit = true;
      continue;
    }

    if (ch == '%')
    {
      break;
    }

    if (ch == ':')
    { 
      curtok = i;
      if (!saw_digit)
      {
        if (colonp != -1)
        { 
          return false;
        }
        colonp = j;
        continue;
      }
      else if (i == ip.length)
      {
        return false;
      }

      if ((j + 2) > V6_INADDRSZ)
      {
        return false;
      }
      j += 2;
      val = 0;
      saw_digit = false;
      continue;
    }

    if (ch == '.'  && ((j + 4) <= V6_INADDRSZ))
    {
      //TODO: IPv4 mapped IPv6 address is not supported
      if (!valid_v4(ip.substring(curtok)))
      {
        return false;
      }
      j += 4;
      saw_digit = false;
      break;
    }
    return false;
  }

  if (saw_digit) 
  {
    if ((j + 2) > V6_INADDRSZ)
    {
      return false;
    }
    j += 2;
  }

  if (colonp != -1)
  {
    if (j == V6_INADDRSZ)
    {
      return false;
    }
    j = V6_INADDRSZ;
  }

  if (j != V6_INADDRSZ)
  {
    return false;
  }

  return true;
}

//-->
</SCRIPT>
