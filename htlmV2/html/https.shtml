<!--#set var="helpURL" val="javascript:launch('/help/https_h.shtml')" -->
<!--#set var="WizardFormAction" val="/sm/sm.srv" -->

<!--#set var="activeMenu" val="system" -->
<!--#set var="activeMenu1" val="security" -->
<!--#set var="activePage" val="https" -->

<!--#include virtual="/incl/top_incl.shtml" -->

<!--#include virtual="/java/chkbox.shtml" -->
<!--#include virtual="/sm/sm.srv?action=get&group=HTTPS,System.BoaGroupPolicy,System.BoaPort,Network.Enabled" -->

<script src="/incl/soapclient.js?ver=<!--#echo var="root_Properties_Firmware_Version" option="encoding:url" -->" language="javascript" type="text/javascript"></script>

<script language="JavaScript">
<!--

//GLOBAL PARAMS
var langObjHttps = new Language("https", "https");
var nameSpaces = new SOAPClientNS();
var configObj;
var ciphers;
var relocate_page = "/admin/https.shtml?id=<!--#echo var="ssi_request_id" option="encoding:url" -->";
//END GLOBAL PARAMS

function init()
{
  getConfiguration();
}


function getConfiguration( responseObj )
{
  if(!responseObj)
  {
    var params = new SOAPClientParameters();
  
    nameSpaces = getNameSpaces( "vapix" );
    
    var now = new Date();
    var timestamp = "?timestamp="+now.getTime();
    
    var wsdlUrl = "/wsdl/vapix/HttpConfigurationService.wsdl";
    var url = "/vapix/services"+timestamp;
    
    var method = "aweb:GetWebServerTlsConfiguration";
    
    params.add("Name", "WebServer");
    
    SOAPClient.invoke( wsdlUrl, url, nameSpaces, method, params, true, getConfiguration );
  }
  else
  {
    if( responseObj )
    {
      if(responseObj.name == "Error")
      {
        outputResponseError(responseObj);
        return;
      }
      else
      {
        configObj = responseObj; //Saving configuration for later use
        getCertList();
      }
    }
  }
}

function outputResponseError( responseObj )
{
  alert(responseObj.name+"\n"+langObjHttps.getText("descAlrt")+" "+responseObj.description+"\n"+langObjHttps.getText("msgAlrt")+" "+responseObj.message+"\n"+langObjHttps.getText("fileNAlrt")+" "+responseObj.fileName);
}

function getCertList()
{ 
  var params = new SOAPClientParameters();
  
  nameSpaces = getNameSpaces( "onvif" );
  
  var now = new Date();
  var timestamp = "?timestamp="+now.getTime();
  
  var wsdlUrl = "/wsdl/onvif/devicemgmt.wsdl";
  var url = "/vapix/services"+timestamp;
  
  var method = "tds:GetCertificates";
  SOAPClient.invoke( wsdlUrl, url, nameSpaces, method, params, true, setupConfiguration );
}

function setupConfiguration( responseObj )
{
  var selectList = document.getElementById("certificateList");
  var certArr = new Array();

  if(responseObj)
  {
    if(responseObj.name == "Error")
    {
      createEmptyList(selectList);
      outputResponseError(responseObj);
      return;
    }
    
    if(!responseObj.NvtCertificate.length) //Meaning undefined, then its not an array (only one or no element), SOAP does that...
      certArr.push(responseObj.NvtCertificate);
    else
      certArr = responseObj.NvtCertificate;
  }

  var certInUse
  if(configObj.Configuration.CertificateSet.Certificates == null)
    certInUse = "";
  else
    certInUse = configObj.Configuration.CertificateSet.Certificates.Id;
  
  if(certArr.length != 0)
  {
    certArr.sort(sortById);
  
    op = document.createElement("OPTION");
    op.value = "";
    op.text = "None";
    if(!certInUse || certInUse == "")
      op.selected = true;
    selectList.options.add( op );
  
    for( var i=0; i < certArr.length; i++)
    {
      op = document.createElement("OPTION");
      op.value = certArr[i].CertificateID;
      op.text = certArr[i].CertificateID;
      if(certInUse == certArr[i].CertificateID)
        op.selected = true;
      selectList.options.add( op );
    }
  }
  else
  {
    createEmptyList(selectList);
    document.getElementById("https_ciphersBtn").disabled = true;
  }
  
  var connPolicies = new Array();
  connPolicies[0] = new Object();
  connPolicies[0].list = "serverListAdmin"
  connPolicies[0].type = configObj.Configuration.ConnectionPolicies.Admin;
  connPolicies[1] = new Object();
  connPolicies[1].list = "serverListOperator";
  connPolicies[1].type = configObj.Configuration.ConnectionPolicies.Operator;
  connPolicies[2] = new Object();
  connPolicies[2].list = "serverListViewer"
  connPolicies[2].type = configObj.Configuration.ConnectionPolicies.Viewer;
  
  for( var i=0; i < connPolicies.length; i++)
  {
    if(connPolicies[i].type == "Http")
      document.getElementById(connPolicies[i].list).options[0].selected = true;
    else if(connPolicies[i].type == "Https")
      document.getElementById(connPolicies[i].list).options[1].selected = true;
    else
      document.getElementById(connPolicies[i].list).options[2].selected = true;
  }
  
  if(configObj.Configuration.Ciphers.Cipher instanceof Array)
    ciphers = configObj.Configuration.Ciphers.Cipher;
  else
    ciphers = new Array(configObj.Configuration.Ciphers.Cipher);
}

function createEmptyList( list )
{
  op = document.createElement("OPTION");
  op.value = "";
  op.text = langObjHttps.getText("noCertTxt");
  list.options.add( op );
}

function sortById(a, b)
{
  var x = a.CertificateID.toLowerCase();
  var y = b.CertificateID.toLowerCase();
  return ((x < y) ? -1 : ((x > y) ? 1 : 0));
}

function getNameSpaces( type )
{
  var nsArray = new SOAPClientNS()
  if(type == "onvif")
  {
    nsArray.add("tt", "http://www.onvif.org/ver10/schema" );
    nsArray.add("tds", "http://www.onvif.org/ver10/device/wsdl" );
    nsArray.add("tev", "http://www.onvif.org/ver10/event/wsdl" );
    nsArray.add("ter", "http://www.onvif.org/ver10/error" );
    nsArray.add("wsnt", "http://docs.oasis-open.org/wsn/b-2" );
  }
  else if(type == "vapix")
  {
    nsArray.add("aweb", "http://www.axis.com/vapix/ws/webserver" );
    nsArray.add("acert", "http://www.axis.com/vapix/ws/cert" );
  }
  return nsArray;
}

function saveData()
{
  var params = new SOAPClientParameters();
  
  nameSpaces = getNameSpaces( "vapix" );
  
  var now = new Date();
  var timestamp = "?timestamp="+now.getTime();
  
  var wsdlUrl = "/wsdl/vapix/HttpConfigurationService.wsdl";
  var url = "/vapix/services"+timestamp;
  
  var method = "aweb:SetWebServerTlsConfiguration";
  
  var connPolObj = new Array();
  connPolObj["aweb:Admin"] = document.getElementById("serverListAdmin").value;
  connPolObj["aweb:Operator"] = document.getElementById("serverListOperator").value;
  connPolObj["aweb:Viewer"] = document.getElementById("serverListViewer").value;
  
  var certSetObj = new Array();
  var cert = new Array();
  cert["acert:Id"] = document.getElementById("certificateList").value;
  certSetObj["acert:Certificates"] = ( cert["acert:Id"] != "") ? cert:"";
  certSetObj["acert:CACertificates"] = ""; //Should be empty - only cert is set here
  certSetObj["acert:TrustedCertificates"] = ""; //Should be empty - only cert is set here

  var ciphersObj = new Array();
  
  for(var i=0; i < ciphers.length; i++)
  {
    var tmpArray = new Array();
    tmpArray["acert:Cipher"] = ciphers[i];
    ciphersObj.push(tmpArray);
  }

  var configParams = new Array();
  if( connPolObj["aweb:Admin"].indexOf("Https") != -1 || connPolObj["aweb:Operator"].indexOf("Https") != -1 || connPolObj["aweb:Viewer"].indexOf("Https") != -1 )
    configParams["Tls"] = true;
  else
    configParams["Tls"] = false;
  configParams["aweb:ConnectionPolicies"] = connPolObj;
  configParams["aweb:Ciphers"] = ciphersObj;
  configParams["aweb:CertificateSet"] = certSetObj;
  
  params.add("Configuration", configParams );
  
  SOAPClient.invoke( wsdlUrl, url, nameSpaces, method, params, true, onFinished );
}

function onFinished( responseObj )
{
  if( responseObj )
  {
    if(responseObj.name == "Error")
    {
      alert( langObjHttps.getText("invdCertConfAlrt") );
      return;
    }
  }
  
  relocate();
}

function relocate()
{
  var admin_new = document.getElementById("serverListAdmin").value;

  var the_hostname = document.location.hostname;
  var loc = document.location;
  loc = loc.toString();
  
  if (loc.indexOf("[") != -1)
    the_hostname = "[" + the_hostname + "]";
    
  if ((document.location.protocol == 'http:') && (admin_new == 'https'))
  {
    var the_https_port = '<!--#echo var="root_HTTPS_Port" option="encoding:javascript" -->';
    relocate_page = 'https://';
    relocate_page += the_hostname;
    
    if (the_https_port != '443')
      relocate_page += ':' + the_https_port;
      
    relocate_page += '/admin/https.shtml?id=<!--#echo var="ssi_request_id" option="encoding:url" -->';
    window.setTimeout("reloadPage()", 2500);
    form.return_page.disabled = true;
  }
  else if ((document.location.protocol == 'https:') && (admin_new == 'http'))
  {
    relocate_page = 'http://';
    relocate_page += the_hostname;
    var the_boa_port = '<!--#echo var="root_System_BoaPort" option="encoding:javascript" -->';
    
    if (the_boa_port != '80')
      relocate_page += ':' + the_boa_port;
      
    relocate_page += '/admin/https.shtml?id=<!--#echo var="ssi_request_id" option="encoding:url" -->';
  }
  else
    relocate_page = '/admin/https.shtml?id=<!--#echo var="ssi_request_id" option="encoding:url" -->'
     
  reloadPage();
}

function reloadPage()
{
  window.location.href = relocate_page;
}

function openCiphersPopUp()
{
  var width = 200;
  var height = 300;
  var ciphersStr = "";

  ciphersStr = ciphers.join( escape(";") );
  
  openPopUp('/admin/ciphers.shtml?ciphers='+ciphersStr+'&id=<!--#echo var="ssi_request_id" option="encoding:url" -->', "Ciphers", width, height );
}

function saveCiphers(confCiphersStr)
{
  ciphers = confCiphersStr.split(",");
}

var CiphersBtnStatTxt;
var SaveBtnStatTxt;
var ResBtnStatTxt;
function globalLanguageVars()
{
  var srvListArr = new Array();
  srvListArr[0] = {val: "Http", text: langObjHttps.getText("httpTxt")};
  srvListArr[1] = {val: "Https", text: langObjHttps.getText("httpsTxt")};
  srvListArr[2] = {val: "HttpAndHttps", text: langObjHttps.getText("bothTxt")};
  
  langObjHttps.addOptionsToList(document.getElementById("serverListAdmin"), srvListArr);
  langObjHttps.addOptionsToList(document.getElementById("serverListOperator"), srvListArr);
  langObjHttps.addOptionsToList(document.getElementById("serverListViewer"), srvListArr);

  CiphersBtnStatTxt  = langObjHttps.getText("lookCiphBtnStatTxt");
  SaveBtnStatTxt  = langObjHttps.getText("saveBtnStatTxt");
  ResBtnStatTxt  = langObjHttps.getText("resetBtnStatTxt");
}
// -->
</script>

</head>
<body <!--#include virtual="/incl/bodytag.shtml" --> onload="langObjHttps.init();init();">

<!--#include virtual="/incl/top_incl2.shtml" -->
  <table border="<!--#echo var="zero" option="encoding:html" -->" cellpadding="<!--#echo var="cellpadding3" option="encoding:html" -->" cellspacing="<!--#echo var="zero" option="encoding:html" -->" width="<!--#echo var="tableWidth3" option="encoding:html" -->">
    <tr>
      <td class="topTitle" align="left" colspan="2" nowrap><span id="httpsSettTxt"></span></td>
      <td class="topTitle">
        <div align="right">
          <a href="<!--#echo var="helpURL" option="encoding:url" -->">
            <img height="27" width="27" src="/pics/help.gif" border="0" id="hlpPic">
          </a>
        </div>
      </td>
    </tr>
    <tr>
      <td colspan="3" class="subTitle"><span id="certsTxt"></span></td>
    </tr>
    <tr>
      <td colspan="3" class="oddItem">
        <span id="ifNoCertGoTotxt"></span>
      </td>
    </tr>
    <tr>
      <td class="evenItem">
        <span id="certTxt"></span>
      </td>
      <td colspan="2" class="evenItem">
        <select name="certificateList" id="certificateList" style="min-width: 200px; width: 200px;"></select>&nbsp;<input type="button" value="" class="btnNormal" onclick="openCiphersPopUp()" onMouseOver="return showStatus(CiphersBtnStatTxt)" onMouseOut="return showStatus('')" id="https_ciphersBtn">
      </td>
    </tr>
    <tr>
    <tr>
      <td colspan="3" class="subTitle"><span id="conPolTxt"></span></td>
    </tr>
    <tr>
      <td class="oddItem" width="10%" nowrap>
        <span id="adWiUsTxt"></span>
      </td>
      <td class="oddItem" colspan="2" width="90%">
        <select name="serverListAdmin" id="serverListAdmin">
        </select>
      </td>
    </tr>
    <tr>
      <td class="evenItem"><span id="opWiUsTxt"></span></td>
      <td class="evenItem" colspan="2">
        <select name="serverListOperator" id="serverListOperator">
        </select>
      </td>
    </tr>
    <tr>
      <td class="oddItem"><span id="viWiUsTxt"></span></td>
      <td class="oddItem" colspan="2">
        <select name="serverListViewer" id="serverListViewer">
        </select>
      </td>
    </tr>
    <tr>
      <td colspan="3" class="button" align="center">
        <input type="button" width="75" value="" class="btnNormal" onclick="saveData()" onMouseOver="return showStatus(SaveBtnStatTxt)" onMouseOut="return showStatus('')" id="https_saveBtn">
        &nbsp;
        <input type="button" width="75" value="" class="btnNormal" onclick="reloadPage()" onMouseOver="return showStatus(ResBtnStatTxt)" onMouseOut="return showStatus('')" id="https_resetBtn">
      </td>
    </tr>
  </table>

<!--#include virtual="/incl/bottom_incl.shtml" -->
