<!--#set var="helpURL" val="javascript:launch('/help/privacy_mask_h.shtml')" -->
<!--#set var="WizardFormAction" val="noAction" -->
<!--#set var="activeMenu" val="videoImage" -->
<!--#set var="activePage" val="mask0" -->
<!--#include virtual="/incl/top_incl.shtml" -->

<!--#if expr="_$nbr = _" --><!--#set var="nbr" val="0" --><!--#endif -->
<!--#if expr="$nbr = 0" --><!--#set var="camnbr" val="1" -->
<!--#elif expr="$nbr = 1" --><!--#set var="camnbr" val="2" -->
<!--#elif expr="$nbr = 2" --><!--#set var="camnbr" val="3" -->
<!--#elif expr="$nbr = 3" --><!--#set var="camnbr" val="4" -->
<!--#endif -->

<!--#set var="root_Image_I$nbr$_Stream_Duration" val="0" -->

      <!--#set var="resolution" val="480x270" -->
<!--#set var="size" val="1" -->
<!--#set var="external" val="no" -->
<!--#set var="UseAudio" val="no" -->
<!--#set var="UseRel" val="no" -->
<!--#set var="useWithCam" val="no" -->
<!--#set var="ptzgui" val="yes" -->
<!--#set var="MovePan" val="abs" -->
<!--#set var="MoveTilt" val="abs" -->
<!--#set var="cgi_path" val="axis-cgi" -->
<!--#set var="root_Layout_ShowAMCToolbar" val="yes" -->

<!--#include virtual="/sm/sm.srv?action=get&group=Image.I0.Overlay.MaskWindows,Image.I0.Appearance.Rotation,PTZ.UserCtlQueue,PTZ.Various.V$camnbr$,PTZ.Auxiliary.A$camnbr$,Layout,PTZ.Support,PTZ.ImageSource,PTZ.Limit" -->

<!--#set var="root_PTZ_Various_V$camnbr$_PanEnabled" val="true" -->
<!--#set var="root_PTZ_Various_V$camnbr$_TiltEnabled" val="true" -->
<!--#set var="root_PTZ_Various_V$camnbr$_ZoomEnabled" val="true" -->
<!--#if expr="$(root_PTZ_Various_V$camnbr$_CtlQueueing) = true" -->
  <!--#set var="queueUsers" val="yes" -->
<!--#endif -->

<!--#if expr="_$root_PTZ_UserCtlQueue_U2_UserGroup != _" -->
  <!--#set var="queue" val="no" -->
<!--#elif expr="$glob_PTZCamera = yes" -->
  <!--#set var="queue" val="no" -->
<!--#endif -->

<!--#include virtual="/axis-cgi/view/imagesize.cgi?format=ssi&camera=$camnbr$&resolution=$resolution$&rotation=0" -->
<!--#include virtual="/incl/setabsrel.shtml" -->
<!--#set var="showPTZCrosshair" val="no" -->

<style type="text/css">

.display   { font-family: courier new, courier, fixed; font-size: 11px; border: 1px solid black; background-color: white; color:black; }
.dragbox_selected   { position: absolute; background:    #3366cc; filter:alpha(opacity=60); -moz-opacity:0.6; -khtml-opacity:0.6; opacity:0.6; z-index: 500; }
.dragbox_unselected { position: absolute; background:    #cc3366; filter:alpha(opacity=60); -moz-opacity:0.6; -khtml-opacity:0.6; opacity:0.6; z-index: 490; }
.boxborder          { position: absolute; background:transparent; filter:alpha(opacity= 0); -moz-opacity:  0; -khtml-opacity:0  ; opacity:0  ; z-index: 501; }

</style>

<script language="JavaScript" src="/incl/pos.js"></script>
<script language="JavaScript" src="/incl/activeX.js"></script>

<script language="JavaScript">
<!--
var langObjPrivMaskFr = new Language("privacymask", "privacy_mask_frame");

<!--#include virtual="/incl/functions.shtml" -->

if ((navigator.appName == "Microsoft Internet Explorer") && (navigator.platform != "MacPPC") && (navigator.platform != "Mac68k")) {
  var browser = "IE";
} else {
  var browser = "Netscape";
}

var img_width = parseInt("<!--#echo var="img_width" option="encoding:javascript" -->", 10);
var img_height = parseInt("<!--#echo var="img_height" option="encoding:javascript" -->", 10);
var rotation = "<!--#echo var="root_Image_I$nbr$_Appearance_Rotation" option="encoding:javascript" -->";
if (rotation.length <= 0)
  rotation = "0";

function area(name, enabled, position, param, zoomlowlimit)
{
  this.box = new Box(0,0,0,0) //The area's current location in the image (in pixels)
  this.enabled = enabled;
  this.position = position; //Current cordinates of the area.
  this.name=name;  //Name of the area
  this.zoomlowlimit = zoomlowlimit;  //Threshold when mask should be seen
  this.param=param; //Parameter used when adding, updating and removing an area.
  this.dirty=false; //True if an area is changed.
  this.isEditing=false; //True during the change of an area, ie while dragging or resizing area.
  this.areaID = 32;
  this.dragArea = null; //Element which the area is contained in
  this.dragArea_Box = null; //The dragArea's total left and top offset
  this.dragbox = null; //The area itself
  this.hasDragged = false; //True when drag has been made between position update requests.
  this.borderN = null; //The area's upper border, used for resize up.
  this.borderE = null; //The area's right border, used for resize to the right.
  this.borderS = null; //The area's upper border, used for resize down.
  this.borderW = null; //The area's upper border, used for resize to the left.

  this.oldMousePosX = 0;
  this.oldMousePosY = 0;

  this.init = function(dragArea, areaID) {
    this.areaID = areaID;
    this.dragArea = document.getElementById(dragArea);
    this.dragArea_Box = getElementPosition(dragArea);
    
    var db = document.createElement("DIV");
    document.body.appendChild(db);
    this.dragbox = db;
    db.exAr_nr = areaID;
    db.className = 'dragbox_unselected';
    db.id = 'dragbox' + areaID;
    db.style.visibility = 'hidden';
    db.obj = this;
    this.handle_db = db;

    var bn = document.createElement("DIV");
    document.body.appendChild(bn);
    this.borderN = bn
    bn.exAr_nr = areaID;
    bn.className = 'boxborder';
    bn.id = 'borderN' + areaID;
    bn.style.visibility = 'hidden';
    bn.obj = this;
    this.handle_bn = bn;

    var be = document.createElement("DIV");
    document.body.appendChild(be);
    this.borderE = be;
    be.exAr_nr = areaID;
    be.className = 'boxborder';
    be.id = 'borderE' + areaID;
    be.style.visibility = 'hidden';
    be.obj = this;
    this.handle_be = be;

    var bs = document.createElement("DIV");
    document.body.appendChild(bs);
    this.borderS = bs;
    bs.exAr_nr = areaID;
    bs.className = 'boxborder';
    bs.id = 'borderS' + areaID;
    bs.style.visibility = 'hidden';
    bs.obj = this;
    this.handle_bs = bs;

    var bw = document.createElement("DIV");
    document.body.appendChild(bw);
    this.borderW = bw;
    bw.exAr_nr = areaID;
    bw.className = 'boxborder';
    bw.id = 'borderW' + areaID;
    bw.style.visibility = 'hidden';
    bw.obj = this;
    this.handle_bw = bw;
  }

  this.noAction = function(event) {
    return true;
  }

  this.stopDragging = function(event) {
    if (!event) event = window.event;
    var o = (this.obj ? this.obj : window.document.obj);
    o.hasDragged = true;

    window.document.onmousemove = o.noAction;
    window.document.onmouseup = o.noAction;
    o.isEditing = false;

    o.dragbox.style.cursor = 'move';
    o.oldMousePosX = 0; // Reset after moveBox(mouseX, mouseY)
    o.oldMousePosY = 0;
    o.setBorders();

    o.updateAreaPositions();

    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false;
  }

  this.setBorders = function() {
    this.dragbox.onmousemove = this.noAction;
    this.dragbox.onmousedown = this.moveHandler;
    this.dragbox.onmouseup = this.noAction;

    this.dragArea.onmousemove = this.noAction;
    this.dragArea.onmousedown = this.noAction;
    this.dragArea.onmouseup = this.noAction;

    this.borderN.style.left = this.box.x + this.dragArea_Box.left;
    this.borderN.style.top = this.box.y + this.dragArea_Box.top;
    this.borderN.style.width = this.box.w;
    this.borderN.style.height = 10;
    this.borderN.style.visibility = 'visible'
    this.borderN.style.cursor = 'n-resize';
    this.borderN.style.background = "blue";
    this.borderN.onmousedown = this.resizeHandlerN;
    this.borderN.onmouseup = this.noAction;
    this.borderN.onmousemove = this.noAction;

    this.borderE.style.left = this.box.x + this.dragArea_Box.left + this.box.w - 10;
    this.borderE.style.top = this.box.y + this.dragArea_Box.top;
    this.borderE.style.width = 10;
    this.borderE.style.height = this.box.h;
    this.borderE.style.visibility = 'visible'
    this.borderE.style.cursor = 'e-resize';
    this.borderE.style.background = "blue";
    this.borderE.onmousedown = this.resizeHandlerE;
    this.borderE.onmouseup = this.noAction;
    this.borderE.onmousemove = this.noAction;

    this.borderS.style.left = this.box.x + this.dragArea_Box.left;
    this.borderS.style.top = this.box.y + this.dragArea_Box.top + this.box.h - 10;
    this.borderS.style.width = this.box.w;
    this.borderS.style.height = 10;
    this.borderS.style.visibility = 'visible'
    this.borderS.style.cursor = 's-resize';
    this.borderS.style.background = "blue";
    this.borderS.onmousedown = this.resizeHandlerS;
    this.borderS.onmouseup = this.noAction;
    this.borderS.onmousemove = this.noAction;

    this.borderW.style.left = this.box.x + this.dragArea_Box.left;
    this.borderW.style.top = this.box.y + this.dragArea_Box.top;
    this.borderW.style.width = 10;
    this.borderW.style.height = this.box.h;
    this.borderW.style.visibility = 'visible'
    this.borderW.style.cursor = 'w-resize';
    this.borderW.style.background = "blue";
    this.borderW.onmousedown = this.resizeHandlerW;
    this.borderW.onmouseup = this.noAction;
    this.borderW.onmousemove = this.noAction;
    return;
  }

  this.removeBorders = function() {
    this.dragbox.onmousemove = this.noAction;
    this.dragbox.onmousedown = this.noAction;
    this.dragbox.onmouseup = this.noAction;

    this.borderN.style.visibility = 'hidden'
    this.borderN.onmousedown = this.noAction;
    this.borderN.onmouseup = this.noAction;
    this.borderN.onmousemove = this.noAction;

    this.borderE.style.visibility = 'hidden'
    this.borderE.onmousedown = this.noAction;
    this.borderE.onmouseup = this.noAction;
    this.borderE.onmousemove = this.noAction;

    this.borderS.style.visibility = 'hidden'
    this.borderS.onmousedown = this.noAction;
    this.borderS.onmouseup = this.noAction;
    this.borderS.onmousemove = this.noAction;

    this.borderW.style.visibility = 'hidden'
    this.borderW.onmousedown = this.noAction;
    this.borderW.onmouseup = this.noAction;
    this.borderW.onmousemove = this.noAction;
    return;
  }

  this.resizeHandlerN = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeN(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeHandlerE = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeE(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeHandlerS = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeS(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeHandlerW = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeW(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.moveHandler = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.moveBox(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeN = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosY != 0) {
      this.dirty = true;
      var d = mouseY - this.oldMousePosY;
      if (this.box.y + d < 0) {
        // Resize outside stream
        this.box.h += this.box.y;
        this.box.y = 0;
      } else if (this.box.h - d < 20) {
        this.box.y += this.box.h - 20;
        this.box.h = 20;
      } else {
        this.box.y += d;
        this.box.h -= d;
      }

      var t = this.dragArea_Box.top + this.box.y;
      this.dragbox.style.top = t;
      this.dragbox.style.height = this.box.h;
      this.borderN.style.top = t;
      this.borderE.style.top = t;
      this.borderW.style.top = t;
      this.borderE.style.height = this.box.h;
      this.borderW.style.height = this.box.h;
    }
    this.oldMousePosY = mouseY;
    this.borderN.onmousemove = this.resizeHandlerN;
    this.dragbox.onmousemove = this.resizeHandlerN;
    this.dragArea.onmousemove = this.resizeHandlerN;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderN.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
  }

  this.resizeE = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosX != 0) {
      this.dirty = true;
      var d = mouseX - this.oldMousePosX;
      if (this.box.w + d < 20) {
        this.box.w = 20;
      } else if (this.box.x + this.box.w + d > this.dragArea.width ) {
        this.box.w = this.dragArea.width - this.box.x;
      } else {
        this.box.w += d;
      }

      this.dragbox.style.width = this.box.w;
      this.borderE.style.left = this.dragArea_Box.left + this.box.x + this.box.w - 10;
      this.borderN.style.width = this.box.w;
      this.borderS.style.width = this.box.w;
    }
    this.oldMousePosX = mouseX
    this.borderE.onmousemove = this.resizeHandlerE;
    this.dragbox.onmousemove = this.resizeHandlerE;
    this.dragArea.onmousemove = this.resizeHandlerE;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderE.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
  }

  this.resizeS = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosY != 0) {
      this.dirty = true;
      var d = mouseY - this.oldMousePosY;
      if (this.box.h + d < 20) {
        this.box.h = 20;
      } else if (this.box.y + this.box.h + d > this.dragArea.height) {
        this.box.h = this.dragArea.height - this.box.y;
      } else {
        this.box.h = this.box.h + d;
      }

      this.dragbox.style.height = this.box.h;
      this.borderS.style.top = this.dragArea_Box.top + this.box.y + this.box.h - 10;
      this.borderE.style.height = this.box.h;
      this.borderW.style.height = this.box.h;
    }
    this.oldMousePosY = mouseY
    this.borderS.onmousemove = this.resizeHandlerS;
    this.dragbox.onmousemove = this.resizeHandlerS;
    this.dragArea.onmousemove = this.resizeHandlerS;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderS.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
  }

  this.resizeW = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosX != 0) {
      this.dirty = true;
      var d = mouseX - this.oldMousePosX;
      if (this.box.x + d < 0) {
        this.box.w += this.box.x;
        this.box.x = 0;
      } else if (this.box.w - d < 20) {
        this.box.x += this.box.w - 20;
        this.box.w = 20;
      } else {
        this.box.x += d;
        this.box.w -= d;
      }
      var l = this.box.x + this.dragArea_Box.left;
      this.dragbox.style.left = l;
      this.dragbox.style.width = this.box.w;
      this.borderW.style.left = l;
      this.borderN.style.left = l;
      this.borderS.style.left = l;
      this.borderN.style.width = this.box.w;
      this.borderS.style.width = this.box.w;
    }
    this.borderW.onmousemove = this.resizeHandlerW;
    this.dragbox.onmousemove = this.resizeHandlerW;
    this.dragArea.onmousemove = this.resizeHandlerW;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderW.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
    this.oldMousePosX = mouseX
  }

  this.moveBox = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosX != 0) {
      this.dirty = true;
      var dx = mouseX - this.oldMousePosX;
      if (this.box.x + dx < 0) {
        this.box.x = 0;
      } else if (this.box.x + this.box.w + dx > this.dragArea.width) {
        this.box.x = this.dragArea.width - this.box.w;
      } else {
        this.box.x += dx;
      }
      var dy = mouseY - this.oldMousePosY;
      if (this.box.y + dy < 0) {
        this.box.y = 0;
      } else if (this.box.y + this.box.h + dy > this.dragArea.height) {
        this.box.y = this.dragArea.height - this.box.h;
      } else {
        this.box.y += dy;
      }
      this.dragbox.style.top = this.dragArea_Box.top + this.box.y;
      this.dragbox.style.left = this.dragArea_Box.left + this.box.x;
    }

    this.oldMousePosX = mouseX
    this.oldMousePosY = mouseY
    this.dragArea.onmousemove = this.moveHandler;
    this.dragArea.onmouseup= this.stopDragging;
    this.dragArea.onmousedown = this.noAction;
    this.dragbox.onmousemove = this.moveHandler;
    this.dragbox.onmouseup = this.stopDragging;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderN.style.visibility = 'hidden';
    this.borderE.style.visibility = 'hidden';
    this.borderS.style.visibility = 'hidden';
    this.borderW.style.visibility = 'hidden';
  }

  this.updateAreaPositions = function() {
    var now = new Date();
    var posQuery = "/axis-cgi/view/ptzcoordcalc.cgi";
    posQuery += "?action=getpantilt&responseformat=plain&generate_header=yes";
    posQuery += "&imageresolution=" + img_width + "x" + img_height;
    posQuery += "&imagerotation=" + rotation;
    posQuery += "&coordinates=" + this.box.x+","+this.box.y+ ":" + this.box.x+","+(this.box.y+this.box.h) + ":" + (this.box.x+this.box.w)+","+this.box.y + ":" + (this.box.x+this.box.w)+","+(this.box.y+this.box.h);
    posQuery += "&timestamp=" + now.getTime();
    this.position = sendAction(posQuery, "GET");
    delete now;
  }

}

function noAction(event)
{
  return true;
}

function getElementPosition(elemID)
{
  var offsetTrail = document.getElementById(elemID);
  var offsetLeft = 0;
  var offsetTop = 0;
  while (offsetTrail) {
    offsetLeft += offsetTrail.offsetLeft;
    offsetTop += offsetTrail.offsetTop;
    offsetTrail = offsetTrail.offsetParent;
  }
  if (navigator.userAgent.indexOf("Mac") != -1 && typeof document.body.leftMargin != "undefined") {
    offsetLeft += parseInt(document.body.leftMargin, 10);
    offsetTop += parseInt(document.body.topMargin, 10);
  }
  return {left:offsetLeft, top:offsetTop};
}

function drawArea(areaID, editing)
{
  if (areaID >= 0 && areas[areaID].isEditing)
    return;
  if (editing && isNewArea && isDrawOnce)
    isDrawOnce = false;

  var areaPos = areas[areaID].position;
  var area_x = parseInt(areas[areaID].box.x, 10);
  var area_w = parseInt(areas[areaID].box.w, 10);
  var area_y = parseInt(areas[areaID].box.y, 10);
  var area_h = parseInt(areas[areaID].box.h, 10);
  if (editing)
    var areaName = document.getElementById("newAreaName").value;
  else
    var areaName = areas[areaID].name;
  var areaEnabled = (areas[areaID].enabled == "yes");

  if (browser == "IE") {
    if (area_w <= 0 || area_h <= 0) {
      try { document.Player.RemoveUserWindow(areaID); }
      catch(e) {}
      return;
    }

    var x = parseInt(area_x*9999/img_width, 10);
    var y = parseInt(area_y*9999/img_height, 10);
    var w = parseInt(area_w*9999/img_width, 10);
    var h = parseInt(area_h*9999/img_height, 10);
    var flags = 0

    if (editing == true) {
      areaColor = 0xCC6633;
      flags |= 1; // resizable
      flags |= 2; // movable
    } else {
      flags |= 16; // not selectable
      areaColor = 0x6633CC;
    }
    if (areaEnabled)
      flags |= 4 // fill
    try { document.Player.SetUserWindow( areaID, areaName, x, y, w, h, areaColor, 50, flags); } catch(e) {}
  } else {
    if (areas[areaID].isEditing)
      return;
    imagepos = getPos(areas[areaID].dragArea)
    if (area_x < 0) {
      area_w += area_x;
      area_x = 0;
    }
    if (area_x + area_w > img_width)
      area_w = img_width - area_x;
    if (area_y < 0) {
      area_h += area_y;
      area_y = 0;
    }
    if (area_y + area_h > img_height)
      area_h = img_height - area_y;
    var left = imagepos.x + area_x;
    var top = imagepos.y + area_y;
    var width = area_w;
    var height = area_h;
    var db = document.getElementById("dragbox" + areaID);
    if (width > 0 && height > 0) {
      if (currentSelecetdIndex == areaID) {
        db.className = "dragbox_selected";
        db.onmousedown = areas[areaID].moveHandler;
        db.style.cursor = 'move';
        areas[areaID].setBorders()
      } else {
        db.className = "dragbox_unselected";
        db.onmousedown = areas[areaID].noAction;
        db.style.cursor = '';
        areas[areaID].removeBorders();
      }
      db.style.left = left;
      db.style.top = top;
      db.style.width = width;
      db.style.height = height;
      db.style.visibility = 'visible';
    } else {
      db.style.visibility = 'hidden';
    }
  }
}

var drawAllAreas_timeout;
function drawAllAreas()
{
  clearTimeout(drawAllAreas_timeout);
  for (var i = 0; i < areas.length; i++) {
    drawArea(i, i==currentSelecetdIndex);
  }

  drawAllAreas_timeout = window.setTimeout(function() {drawAllAreas();}, 1000);
}

<!--#include virtual="/incl/statusPtz.shtml" -->

var areas = new Array();
var area_backup = false;

function onLoad()
{
  var inputs = document.getElementById("idListForm").elements;
  var column1 = 60;
  var column2 = 9;
  var tmpOptionName;
  
  if( inputs.length > 0) {
    for (var i = 0; i < 32; i++) {
      var name = "";
      var nameElement = document.getElementsByName("root_Image_I0_Overlay_MaskWindows_M" + i + "_Name")[0];
      if (nameElement) {
        if (nameElement.value.length > 0) {
          name = nameElement.value;
        }
      }
      
      var enabled = "no";
      var enabledElement = document.getElementsByName("root_Image_I0_Overlay_MaskWindows_M" + i + "_Enabled")[0];
      if (enabledElement) {
        if (enabledElement.value.length > 0) {
          enabled = enabledElement.value;
        }
      }
      
      var position = "";
      var ptpolygonElement = document.getElementsByName("root_Image_I0_Overlay_MaskWindows_M" + i + "_PtPolygon")[0];
      if (ptpolygonElement) {
        if (ptpolygonElement.value.length > 0) {
          position = ptpolygonElement.value;
        }
      }
      
      var zoomlowlimit= "";
      var zoomlowlimitElement = document.getElementsByName("root_Image_I0_Overlay_MaskWindows_M" + i + "_ZoomLowLimit")[0];
      if (zoomlowlimitElement) {
        if (zoomlowlimitElement.value.length > 0) {
          zoomlowlimit = zoomlowlimitElement.value;
        }
      }
      
      var param = "Image.I0.Overlay.MaskWindows.M" + i;
      
      areas.push(new area(name, enabled, position, param, zoomlowlimit));
    }
    
    for (i = 0; i < areas.length; i++)
    {
      var nameElement = document.getElementsByName("root_Image_I0_Overlay_MaskWindows_M" + i + "_Name")[0];
      if (nameElement) {
        if (nameElement.value.length > 0) {
          var oOption = document.createElement("OPTION");
          document.getElementById("idAreaList").options.add(oOption);
          var tmpText = getPaddedString(areas[i].name, column1, true);
          tmpText += getPaddedString((areas[i].enabled == "yes" ? langObjPrivMaskFr.getText("yesTxt") : langObjPrivMaskFr.getText("noTxt")), column2, false);
          oOption.innerHTML = tmpText;
          oOption.value = i;
        }
      }
    }
  }

  if (browser != "IE") {
    for (i = 0; i < areas.length; i++) {
      areas[i].init("stream", i);
    }
  }
  
  init();
  updatePositions();
  drawAllAreas();
}

function onResize()
{
  if (browser != "IE") {
    var stream_box = getElementPosition("stream");
    for (var i = 0; i < areas.length; i++) {
      areas[i].dragArea_Box = stream_box;
    }
    drawAllAreas();
  }
}

var isNewArea = false;
var isDrawOnce = false;

function addArea()
{
  if (isNewArea) {
    alert( langObjPrivMaskFr.getText("twoNewAreasAlrt") );
    return;
  }

  currentSelecetdIndex = -1;
  for (var i = 0; i < areas.length; i++) {
    if (areas[i].name.length <= 0) {
      currentSelecetdIndex = i;
      break;
    }
  }

  if ((areas.length > 0) && (currentSelecetdIndex == -1)) {
    alert( langObjPrivMaskFr.getText("maxAreas1Alrt")+" 32 "+langObjPrivMaskFr.getText("maxAreas2Alrt"));
    return;
  }
  
  if (checkIsDirty())
    return;

  if (currentSelecetdIndex != -1) {
    createBackup(currentSelecetdIndex);
  } else {
    // first area
    currentSelecetdIndex = 1;
  }

  document.getElementById("idAreaList").selectedIndex = -1;
  var areaName = "Mask area " + currentSelecetdIndex;
  document.getElementById("newAreaName").value = areaName;
  document.getElementById("newAreaName").disabled = false;
  document.getElementById("newZoomLowLimitBtn").disabled = false;
  isNewArea = true;
  
  areas[currentSelecetdIndex].box.x = parseInt(img_width * 3 / 8, 10);
  areas[currentSelecetdIndex].box.w = parseInt(img_width / 4, 10);
  areas[currentSelecetdIndex].box.y = parseInt(img_height * 3 / 8, 10);
  areas[currentSelecetdIndex].box.h = parseInt(img_height / 4, 10);
  areas[currentSelecetdIndex].enabled = "yes";
  areas[currentSelecetdIndex].name = areaName;
  areas[currentSelecetdIndex].dirty = true;
  areas[currentSelecetdIndex].updateAreaPositions();
  
  isDrawOnce = true;
  drawArea(currentSelecetdIndex, true);
}

function removeArea()
{
  if (checkIsDirty())
    return;
  var areaList = document.getElementById("idAreaList");
  var selIndex =  areaList.selectedIndex;
  if(selIndex >= 0) {
    var currentSelecetdIndex = areaList.options[areaList.selectedIndex].value;
    save_remove_mask(currentSelecetdIndex);
  } else if (isNewArea) {
    reload_page();
  } else {
    alert( langObjPrivMaskFr.getText("removeAreaAlert") );
  }
}

function enableDisableArea()
{
  if (checkIsDirty())
    return;
  var areaList = document.getElementById("idAreaList");
  var selIndex = areaList.selectedIndex;
  if(selIndex >= 0) {
    var currentSelecetdIndex = areaList.options[areaList.selectedIndex].value;
    var enabled = "yes";
    if (areas[currentSelecetdIndex].enabled == "yes") {
      enabled = "no";
    }
    sendAction("/axis-cgi/param.cgi?action=update&Image.I0.Overlay.MaskWindows.M" + currentSelecetdIndex + ".Enabled=" + enabled + "&timestamp=" + now.getTime(), "GET");
    reload_page();
  } else if (isNewArea) {
    reload_page();
  } else {
    alert( langObjPrivMaskFr.getText("enableAreaAlert") );
  }
}

function saveColor()
{
  var colorList = document.getElementById("idColorList");
  var color =  colorList.options[colorList.selectedIndex].value;
  var now = new Date();
  sendAction("/axis-cgi/param.cgi?action=update&Image.I0.Overlay.MaskWindows.Color=" + color + "&timestamp=" + now.getTime(), "GET");
  return;
}

var drawTimeout = null;
var currentSelecetdIndex = -1;
function editArea()
{
  if (checkIsDirty())
    return;

  var areaList = document.getElementById("idAreaList");
  if(areaList.selectedIndex>= 0) {
    if (isNewArea && currentSelecetdIndex >= 0) {
      if (browser == "IE") {
        try { document.Player.RemoveUserWindow(currentSelecetdIndex); }
        catch(e) {}
      } else {
        areas[currentSelecetdIndex].removeBorders();
        areas[currentSelecetdIndex].dragbox.style.visibility = "hidden";
      }
      areas[currentSelecetdIndex].box.x = 0;
      areas[currentSelecetdIndex].box.w = 0;
      areas[currentSelecetdIndex].box.y = 0;
      areas[currentSelecetdIndex].box.h = 0;
      areas[currentSelecetdIndex].position = "";
      areas[currentSelecetdIndex].enabled = "no";

      isNewArea = false;
    }

    currentSelecetdIndex = areaList.options[areaList.selectedIndex].value;
    document.getElementsByName('action')[0].value = "update";
    document.getElementsByName('group')[0].value = areas[currentSelecetdIndex].param;
    document.getElementById("newAreaName").value = areas[currentSelecetdIndex].name;
    document.getElementById("newAreaName").disabled = false;
    document.getElementById("newZoomLowLimitBtn").disabled = false;
    document.getElementById("newZoomLowLimitTxt").innerHTML = convertZoomLowLimit(areas[currentSelecetdIndex].zoomlowlimit);
    document.getElementsByName('Enabled')[0].value = areas[currentSelecetdIndex].enabled;
    var areaPos = areas[currentSelecetdIndex].position;

    createBackup(currentSelecetdIndex);

    var pan = getPanArray(areaPos);
    var tilt = getTiltArray(areaPos);

    var pan_center = getPanCenter(pan.min, pan.max);
    var tilt_center = getTiltCenter(tilt.min, tilt.max);

    gotoMask(areas[currentSelecetdIndex].name);

    clearTimeout(drawTimeout);
    drawTimeout = window.setTimeout(function(){
        updatePositions();
        drawTimeout = window.setTimeout(function(){
          drawArea(currentSelecetdIndex, true);
        },500)
      }, 1000);
  } else {
    alert( langObjPrivMaskFr.getText("editAlert") );
  }
}

function checkIsDirty()
{
  var isDirty = false;

  if (currentSelecetdIndex != -1
      && areas[currentSelecetdIndex].dirty)
  {
    if ( confirm( langObjPrivMaskFr.getText("isDirtyConfirm") ) )
    {
      if(!isNewArea)
      {
        if (area_backup)
        {
          areas[currentSelecetdIndex].box = area_backup.box;
          areas[currentSelecetdIndex].enabled = area_backup.enabled;
          areas[currentSelecetdIndex].position = area_backup.position;
          areas[currentSelecetdIndex].name = area_backup.name;
          areas[currentSelecetdIndex].param = area_backup.param;
          areas[currentSelecetdIndex].zoomlowlimit = area_backup.zoomlowlimit;
          areas[currentSelecetdIndex].dirty = false;
          areas[currentSelecetdIndex].isEditing = false;
          areas[currentSelecetdIndex].areaID = area_backup.areaID;
          delete area_backup;
          area_backup = false;
        }
        document.getElementById("newAreaName").value = "";
        currentSelecetdIndex = -1;
        isDrawOnce = false;
      }
    }
    else
    {
      document.getElementById("idAreaList").selectedIndex = currentSelecetdIndex;
      isDirty = true;
    }
  }
  return isDirty;
}

function createBackup(id)
{
  area_backup = new area(areas[id].name, areas[id].enabled, areas[id].position, areas[id].param, areas[id].zoomlowlimit);
  area_backup.box = areas[id].box;
  area_backup.areaID = areas[id].areaID;
}

function resetValues()
{
  reload_page();
}

function saveData()
{
  if (document.getElementById("idColorList").options[document.getElementById("idColorList").selectedIndex].value != "<!--#echo var="root_Image_I0_Overlay_MaskWindows_Color" option="encoding:javascript" -->") {
    saveColor()
  }

  if (currentSelecetdIndex >= 0) {
    if (isNewArea)
      save_new_mask(currentSelecetdIndex);
    else
      save_update_mask(currentSelecetdIndex);
  }
}

function getPanWidth(minPan, maxPan)
{
  var w1 = maxPan - minPan;
  var w2 = (180 - maxPan) + (180 + minPan);

  return (w1 < w2 ? w1 : w2);
}

function getPanCenter(minPan, maxPan)
{
  var w1 = maxPan - minPan;
  var w2 = (180 - maxPan) + (180 + minPan);

  if (w1 < w2)
    return minPan + w1/2;
  else if (minPan - w2/2 > -180)
    return minPan - w2/2;
  else
    return maxPan + w2/2;
}

function getPanArray(strCordinates)
{
  strCordinates = strCordinates.split(":");
  var panMax = -10000;
  var panMin = 10000;
  for (var i = 0; i < strCordinates.length; i++) {
    var pan = parseFloat(strCordinates[i].split(",")[0]);
    if (panMax < pan)
      panMax = pan;
    if (panMin > pan)
      panMin = pan;
  }
  return {min:panMin, max:panMax}
}

function checkRange(val, vmin, vmax)
{
  return ((val) < (vmin) ? (0) : (val) > (vmax) ? (0) : (val));
}

function getTiltCenter(minTilt, maxTilt)
{
  return (maxTilt - minTilt)/2 + minTilt;
}

function getTiltArray(strCordinates)
{
  strCordinates = strCordinates.split(":");
  var tiltMax = -10000;
  var tiltMin = 10000;
  for (var i = 0; i < strCordinates.length; i++) {
    var tilt = parseFloat(strCordinates[i].split(",")[1]);
    if (tiltMax < tilt)
      tiltMax = tilt;
    if (tiltMin > tilt)
      tiltMin = tilt;
  }
  return {min:tiltMin, max:tiltMax}
}

var gotoRequest = AxisConnectionFactory.createAjaxConnection();
gotoRequest.setOverrideMimeType( 'text/plain' );
function gotoMask(name)
{
  var now = new Date();
  var url = "/axis-cgi/privacymask.cgi?action=goto&name=" + encodeURIComponent(name) + "&timestamp=" + now.getTime();
  AxisConnectionFactory.sendAsync(["GET", url], null, null, gotoRequest);
}

function convertZoomLowLimit(value)
{
  <!--#include virtual="/local/ptz_info.shtml" -->
  if (typeof(ptzDefMaxZoomList) == "number" && isNaN(ptzDefMaxZoomList))
  {
    var str = "[#]x";
    var max_val = 9999;
    var min_val = 1;
    var max_angle = parseInt("0<!--#echo var="root_PTZ_Limit_L$camnbr$_MaxFieldAngle" option="encoding:javascript" -->", 10);
    var min_angle = parseInt("0<!--#echo var="root_PTZ_Limit_L$camnbr$_MinFieldAngle" option="encoding:javascript" -->", 10);
    
    var maxmag = Math.round(max_angle/min_angle);
    var mag = 1 + (maxmag-1) * (value/(max_val-min_val));
  }
  else
  {
    var hasOptical = (typeof(ptzDefMaxOpticalZoomMag) == "number" && !isNaN(ptzDefMaxOpticalZoomMag));
    var hasDigital = (typeof(ptzDefMaxDigitalZoomMag) == "number" && !isNaN(ptzDefMaxDigitalZoomMag));
    var mag = 0;
    var preMag = 1;
    var preValue = 0;
    for (var i = 0; i < ptzDefMaxZoomList.length; i++)
    {
      if (value <= ptzDefMaxZoomList[i][0])
      {
        mag = (value - preValue) / (ptzDefMaxZoomList[i][0] - preValue) * (ptzDefMaxZoomList[i][1] - preMag) + preMag;
        break;
      }
      preValue = ptzDefMaxZoomList[i][0];
      preMag = ptzDefMaxZoomList[i][1];
    }
  }
  var str_optical = "[#]x";
  var str_digital = "[#]x D";
  var str_optical_digital = "[#]x ([#D]x D)";
  if (hasOptical && hasDigital)
  {
    if (mag > ptzDefMaxOpticalZoomMag)
      str = str_optical_digital.replace(/\[#D\]/, Number(mag/ptzDefMaxOpticalZoomMag).toFixed(1));
    else
      str = str_optical;
  }
  else if (hasDigital)
  {
    str = str_digital;
  }
  else
  {
    str = str_optical;
  }
  return str.replace(/\[#\]/, Number(mag).toFixed(1));
}

function getZoomLowLimit()
{
  var now = new Date();
  var position = sendAction("/axis-cgi/com/ptz.cgi?camera=1&query=position&timestamp=" + now.getTime(), "GET");
  if (position)
  {
    var position_array = position.split("\n");
    for (var i = 0; i < position_array.length; i++)
    {
      var value = position_array[i].split("=");
      if (value[0] == "zoom")
      {
        areas[currentSelecetdIndex].zoomlowlimit = parseInt( value[1], 10 );
        document.getElementById("newZoomLowLimitTxt").innerHTML = convertZoomLowLimit(value[1]);
        break;
      }
    }
  }
}

var currentPositions = "";
var updatePositions_timer = null;
var updatePositions_request = AxisConnectionFactory.createAjaxConnection();

function updatePositions()
{
  clearTimeout(updatePositions_timer);
  if (areas.length > 0) {
    var positions = "";
    for (var i = 0; i < areas.length; i++) {
      if (positions != "" && areas[i].position != "")
        positions += ":";
      positions += areas[i].position;
    }
    if (positions == "") {
      updatePositions_timer = window.setTimeout(function(){updatePositions();}, 1000);
      return;
    }
    var now = new Date();
    AxisConnectionFactory.sendAsync(["GET", "/axis-cgi/view/ptzcoordcalc.cgi?action=getpixel&responseformat=plain&imageresolution=" + img_width + "x" + img_height + "&imagerotation=" + rotation + "&generate_header=yes&coordinates=" + positions + "&timestamp=" + now.getTime()], null, updatePositions_onstatechange, updatePositions_request);
    delete now;
    clearTimeout(updatePositions_timer);
  }
}

function updatePositions_onstatechange()
{
  var MINWIDTH = 10;
  var MINHEIGHT = 10;

  if (updatePositions_request.getReadyState() == 4) {
    currentPositions = updatePositions_request.getResponseText();
    currentPositions = currentPositions.split(":");

    var pos = 0;
    for (i = 0; i < areas.length; i++) {
      if (areas[i].position == "") {
        continue;
      }

      if (!areas[i].isEditing && !areas[i].hasDragged) {
        var areaPos = currentPositions[pos*4 + 0] + ":" +
                      currentPositions[pos*4 + 1] + ":" +
                      currentPositions[pos*4 + 2] + ":" +
                      currentPositions[pos*4 + 3];
        if (currentSelecetdIndex == i) {
          areaPos = setMaskInsideArea(areaPos);
        }

        if(areaPos != false)
        {
          var tmpPan = getPanArray(areaPos);
          var tmpTilt = getTiltArray(areaPos);

          if (tmpPan.min > -1000 &&
              tmpPan.max < 1000 &&
              tmpTilt.min > -1000 &&
              tmpTilt.max < 1000) {
            areas[i].box.x = (tmpPan.min < 0 ? 0 : tmpPan.min);
            areas[i].box.y = (tmpTilt.min < 0 ? 0 : tmpTilt.min);
            areas[i].box.w = checkRange((tmpPan.min < 0 ? tmpPan.max : tmpPan.max-tmpPan.min),
                                        MINWIDTH,
                                        2*img_width);
            areas[i].box.h = checkRange((tmpTilt.min < 0 ? tmpTilt.max : tmpTilt.max-tmpTilt.min),
                                        MINHEIGHT,
                                        2*img_height);
          } else {
            areas[i].box.x = -1;
            areas[i].box.y = -1;
            areas[i].box.w = -1;
            areas[i].box.h = -1;
          }
        }
      }
      pos++;
      areas[i].hasDragged = false;
    }
    clearTimeout(updatePositions_timer);
    updatePositions_timer = window.setTimeout(function(){updatePositions();}, 1000);
  }
}

function setMaskInsideArea(strCordinates)
{
  strCordinates = strCordinates.split(":");
  
  for(var i=0; i < strCordinates.length; i++)
  {
    strCordinates[i] = strCordinates[i].split(",");
  }
 
  if(strCordinates[0][0] < 0 && strCordinates[1][0] < 0 && strCordinates[2][0] < 0 && strCordinates[3][0] < 0 ||
     strCordinates[0][1] < 0 && strCordinates[1][1] < 0 && strCordinates[2][1] < 0 && strCordinates[3][1] < 0)
    return false;
  else if(strCordinates[0][0] > img_width && strCordinates[1][0] > img_width && strCordinates[2][0] > img_width && strCordinates[3][0] > img_width ||
          strCordinates[0][1] > img_height && strCordinates[1][1] > img_height && strCordinates[2][1] > img_height && strCordinates[3][1] > img_height)
    return false;
  else if(parseInt(strCordinates[0][0]) + img_width < 0 || parseInt(strCordinates[1][0]) + img_width < 0 ||
          parseInt(strCordinates[2][0]) + img_width < 0 || parseInt(strCordinates[3][0]) + img_width < 0 ||
          parseInt(strCordinates[0][1]) + img_height < 0 || parseInt(strCordinates[1][1]) + img_height < 0 ||
          parseInt(strCordinates[2][1]) + img_height < 0 || parseInt(strCordinates[3][1]) + img_height < 0)
    return false;

  var width = Math.abs(strCordinates[0][0] - strCordinates[1][0]);
  var height = Math.abs(strCordinates[0][1] - strCordinates[2][1]);

  var xOutsideArr = [false,false];
  var yOutsideArr = [false,false];
  var insideCord;
  
  for(var i=0; i < strCordinates.length; i++)
  {
    insideCord = strCordinates[i];
    if(insideCord && insideCord.length == 2)
    {
      if(insideCord[0] < 0)
        xOutsideArr[0] = true;
      else if(insideCord[0] > img_width)
        xOutsideArr[1] = true;

      if(insideCord[1] < 0)
        yOutsideArr[0] = true;
      else if(insideCord[1] > img_height)
        yOutsideArr[1] = true;
    }
  }

  var diff1;
  var diff2;
  if(xOutsideArr[0])
  {
    strCordinates[1][0] = width;
    strCordinates[2][0] = width;

    strCordinates[0][0] = 0;
    strCordinates[3][0] = 0;
  }

  if(xOutsideArr[1])
  {
    strCordinates[0][0] = img_width - width;
    strCordinates[3][0] = img_width - width;

    strCordinates[1][0] = img_width;
    strCordinates[2][0] = img_width;
  }

  if(yOutsideArr[0])
  {
    strCordinates[2][1] = height;
    strCordinates[3][1] = height;

    strCordinates[0][1] = 0;
    strCordinates[1][1] = 0;
  }

  if(yOutsideArr[1])
  {
    strCordinates[0][1] = img_height - height;
    strCordinates[1][1] = img_height - height;

    strCordinates[2][1] = img_height;
    strCordinates[3][1] = img_height;
  }

  for(var i=0; i < strCordinates; i++)
  {
    strCordinates[i] = strCordinates[i].join(",");
  }

  return strCordinates.join(":");
}

var request = AxisConnectionFactory.createAjaxConnection();
request.setOverrideMimeType( 'text/plain' );

function sendAction(action, method)
{
  return AxisConnectionFactory.getResponseTextWith([method, action, false], null, request);
}

var ajaxRequest = AxisConnectionFactory.createAjaxConnection();
ajaxRequest.setOverrideMimeType( 'text/plain' );

function save_new_mask(index) {
  var name = document.getElementById( "newAreaName" ).value;
  var x = areas[ index ].box.x;
  var y = areas[ index ].box.y;
  var w = areas[ index ].box.w;
  var h = areas[ index ].box.h;
  
  if(x == -1 && y == -1 && w == -1 && h == -1)
    return;
  
  var zoomlowlimit = areas[ index ].zoomlowlimit;
  if (isNaN(zoomlowlimit) || zoomlowlimit < 0)
  {
    zoomlowlimit = 0;
  }
  else if (zoomlowlimit > 19999)
  {
    zoomlowlimit = 19999;
  }
  
  if ( x < 0 ) x = 0;
  if ( y < 0 ) y = 0;

  if (!is_valid_name(name, index))
    return;

  var url = "/axis-cgi/privacymask.cgi";
  url += "?action=add";
  url += "&name=" + encodeURIComponent(name);
  url += "&pxpolygon=" + x + "," + y + ":" + ( x+w ) + "," + y + ":" + ( x+w ) + "," + ( y+h ) + ":" + x + "," + ( y+h );
  url += "&zoomlowlimit=" + zoomlowlimit;
  url += "&imageresolution=" + img_width + "x" + img_height;
  url += "&imagerotation=" + rotation;
  if( ajaxRequest ) {
    AxisConnectionFactory.sendAsync(["GET", url], "", save_new_mask_onchange, ajaxRequest);
  }
}
function save_new_mask_onchange() {
  if( ajaxRequest.getReadyState() == 4 ) {
    var responseText = ajaxRequest.getResponseText();
    if (responseText.indexOf("hardware limitations") >= 0) {
      alert( langObjPrivMaskFr.getText("tooCloseMaAlrt") );
    } else if (ajaxRequest.getStatus() == 204 || ajaxRequest.getStatus() == 1223
               || confirm(responseText.replace(/privacy_mask: /g, "") + "\n\n"+langObjPrivMaskFr.getText("contAnWayAlrt") ))
      reload_page();
  }
}
function save_update_mask(index) {
  var name = areas[index].name;
  var new_name = document.getElementById("newAreaName").value;
  var x = areas[index].box.x;
  var y = areas[index].box.y;
  var w = areas[index].box.w;
  var h = areas[index].box.h;
  var zoomlowlimit = areas[index].zoomlowlimit;
  
  if(x == -1 && y == -1 && w == -1 && h == -1)
    return;
  
  if (isNaN(zoomlowlimit) || zoomlowlimit < 0)
  {
    zoomlowlimit = 0;
  }
  else if (zoomlowlimit > 19999)
  {
    zoomlowlimit = 19999;
  }

  if (x < 0) x = 0;
  if (y < 0) y = 0;

  if (name != new_name) {
    if (!is_valid_name(new_name, currentSelecetdIndex))
      return;

    var url = "/axis-cgi/param.cgi" +
              "?action=update" +
              "&Image.I0.Overlay.MaskWindows.M" + index + ".Name=" + encodeURIComponent(new_name);
    sendAction(url, "GET");
    name = new_name;
  }

  var url = "/axis-cgi/privacymask.cgi";
  url += "?action=update";
  url += "&name=" + encodeURIComponent(name);
  url += "&pxpolygon=" + x + "," + y + ":" + (x+w) + "," + y + ":" + (x+w) + "," + (y+h) + ":" + x + "," + (y+h);
  url += "&zoomlowlimit=" + zoomlowlimit;
  url += "&imageresolution=" + img_width + "x" + img_height;
  url += "&imagerotation=" + rotation;
  if( ajaxRequest ) {
    AxisConnectionFactory.sendAsync(["GET", url], "", save_update_mask_onchange, ajaxRequest);
  }
}
function save_update_mask_onchange() {
  if( ajaxRequest.getReadyState() == 4 ) {
    var responseText = ajaxRequest.getResponseText();
    var status = ajaxRequest.getStatus();
    if (responseText.indexOf("hardware limitations") > 0) {
      alert( langObjPrivMaskFr.getText("tooCloseMaAlrt") );
      reload_page();
    } else if ( status == 204
                || status == 1223
                || confirm(responseText.replace( /privacy_mask: /g, ""))) {
        reload_page();
    }
  }
}
function save_remove_mask(index) {
  var url = "/axis-cgi/privacymask.cgi";
  url += "?action=remove";
  url += "&name=" + encodeURIComponent(areas[index].name);
  if( ajaxRequest ) {
    AxisConnectionFactory.sendAsync(["GET", url], "", save_remove_mask_onchange, ajaxRequest);
  }
}
function save_remove_mask_onchange() {
  if( ajaxRequest.getReadyState() == 4 ) {
    var status = ajaxRequest.getStatus();
    if ( status == 200 || status == 204 || status == 1223 ||
         confirm( langObjPrivMaskFr.getText("remErr1Alrt") + status + "\n" + ajaxRequest.getResponseText().replace(/privacy_mask: /g, "") + "\n\n"+langObjPrivMaskFr.getText("remErr2Alrt") ) )
      reload_page();
  }
}

function is_valid_name(name, selected_index) {
  if (typeof(name) != "string" || name.length <= 0) {
    alert( langObjPrivMaskFr.getText("maskNameEmptyAlrt") );
    return false;
  }

  if (name.indexOf('<') != -1 || name.indexOf('>') != -1) {
      alert( langObjPrivMaskFr.getText("invalCharAlrt") )
      return;
    }

  for (var i = 0; i < areas.length; i++) {
    if (selected_index != i && name == areas[i].name && areas[i].enabled == "yes") {
      alert( langObjPrivMaskFr.getText("maskNameIdenticAlrt") );
      return false;
    }
  }

  return true;
}

function reload_page()
{
  document.location.reload(true);
}

var SaveBtnStatTxt;
var ResBtnStatTxt;
var AddBtnStatTxt;
var RemBtnStatTxt;
var EnDisBtnStatTxt;
function globalLanguageVars()
{
  var colorHiddenDiv = document.getElementById("colorHidden");
  var colorHiddenSelect = colorHiddenDiv.getElementsByTagName("select")[0];
  var colorArr = langObjPrivMaskFr.createOptionArrayFromList(colorHiddenSelect);
  langObjPrivMaskFr.addOptionsToList( document.getElementById("idColorList"), colorArr );

  var defineText;
  if (browser == "IE")
    defineText = langObjPrivMaskFr.getText("toDNeMaIETxt");
  else
    defineText = langObjPrivMaskFr.getText("toDNeMaTxt");
  document.getElementById("defineMask").innerHTML = defineText;

  SaveBtnStatTxt = langObjPrivMaskFr.getText("saveBtnStatTxt");
  ResBtnStatTxt = langObjPrivMaskFr.getText("resBtnStatTxt");
  AddBtnStatTxt = langObjPrivMaskFr.getText("addBtnStatTxt");
  RemBtnStatTxt = langObjPrivMaskFr.getText("remBtnStatTxt");
  EnDisBtnStatTxt = langObjPrivMaskFr.getText("enDisBtnStatTxt");
}
//-->
</script>
<!--#include virtual="/incl/ptz_incl.shtml" -->
<!--#include virtual="/incl/ptzctrlpanel_incl2.shtml" -->
</head>

<body <!--#include virtual="/incl/bodytag.shtml" --> onload="langObjPrivMaskFr.init();onLoad();" onresizeend="onResize();">
<form>
  <DIV STYLE="display: none" ID="colorHidden"><!--#include virtual="/sm/sm.srv?action=get_htmlform&get=root.Image.I$nbr$.Overlay.MaskWindows.Color&format=htmlvalue" --></DIV>
</form>
<div style="display: none">
  <form id="idListForm">
    <!--#include virtual="/sm/sm.srv?action=get_htmlform&getgroup=Image.I0.Overlay.MaskWindows&format=hiddenhtmlform" -->
  </form>
</div>

<!--#include virtual="/incl/top_incl2.shtml" -->

<form name="WizardForm" action="privacy_mask_frame.shtml?id=<!--#echo var="ssi_request_id" option="encoding:url" -->" method="POST" onSubmit="return false;">
<table border="0" cellpadding="3" cellspacing="0" width="100%" valign="top">
  <col width="50%"><col width="25%"><col width="25%">
  <tr>
    <td class="topTitle" align="left" colspan="2" nowrap><span id="priMasTxt"></span></td>
    <td class="topTitle"><div align="right"><a href="<!--#echo var="helpURL" option="encoding:url" -->"><img height="27" width="27" src="/pics/help.gif" border="0" alt="" id="hlpPic"></a></div></td>
  </tr>
  <tr>
    <td class="oddItem" colspan="3">
      <span id="defineMask"></span>
    </td>
  </tr>

  <tr>
    <td colspan="3" noWrap class="subTitle"><span id="privMskTitleTxt"></span></td>
  </tr>

  <tr>
    <td noWrap class="oddItem" colspan="3">
      <table width="540" border=0>
        <tr>
          <td align="left" width="360"><span id="nameTxt"></span></td>
          <td align="left"><span id="enabledTxt"></span></td>
        <tr>
      </table>
      <select size="5" style="width: 500px; font-family: monospace; font-size: 10px; white-space: pre;" id="idAreaList" onchange="JavaScript: editArea();"></select>
    </td>
  </tr>
  <tr>
    <td noWrap class="oddItem" colspan="3" align="left">
      <input type="button" class="btnNormal" value="" onclick="JavaScript:addArea();" onMouseOver="return showStatus(AddBtnStatTxt)" onMouseOut="return showStatus('')" id="PrivMskDome_AddAreaBtn">
      <input type="button" class="btnNormal" value="" onclick="JavaScript:removeArea();" onMouseOver="return showStatus(RemBtnStatTxt)" onMouseOut="return showStatus('')" id="PrivMskDome_RemoveAreaBtn">
      <input type="button" class="btnLonger" value="" onclick="JavaScript:enableDisableArea();" width="80" onMouseOver="return showStatus(EnDisBtnStatTxt)" onMouseOut="return showStatus('')" id="PrivMskDome_EnDisAreaBtn">
    </td>
  </tr>

  <tr>
    <td class="evenItem" colspan="1">
      <span id="priMaCoTxt"></span>
    </td>
    <td class="evenItem" colspan="2">
      <select name="root_Image_I<!--#echo var="nbr" option="encoding:html" -->_Overlay_MaskWindows_Color" id="idColorList"></select>
    </td>
  </tr>

  <tr>
    <td colspan="3" noWrap class="subTitle"><span id="addEditAreaTitleTxt"></span></td>
  </tr>
  <tr>
    <td colspan="1"><span id="maskNameTxt"></span></td>
    <td colspan="2"><input type="text" id="newAreaName" maxlength="30" size="31" disabled></td>
  </tr>
  <tr>
    <td colspan="1"><span id="zoLevelTxt"></span></td>
    <td colspan="1"><div id="newZoomLowLimitTxt">-</div></td>
    <td colspan="1"><input type="button" id="newZoomLowLimitBtn" value="" disabled onclick="javascript: getZoomLowLimit();"></td>
  </tr>
  <tr>
    <td colspan="3" align="center" id="idVideoTD">
      <table border="0" cellpadding="0" cellspacing="0" valign="top">
        <tr>
          <td>
            <div id="filterinstallocation"></div>
            <img id="crosshair" src="/pics/crosshair.png" width="16" height="16" style="position:absolute;visibility:hidden;left:0;top:0" border="0" />
            <script language="JavaScript" type="text/javascript">
            <!--
              var File = "/axis-cgi/mjpg/video.cgi?";
              File += "resolution=<!--#echo var="resolution" option="encoding:url" -->";
              File += "&rotation=" + rotation;
              File += "&camera=<!--#echo var="camnbr" option="encoding:url" -->";
              var now = new Date();
              File += "&timestamp=" + now.getTime();
              delete now;

              var stopFile = File;

              <!--#include virtual="/incl/video.shtml" -->
              video(File);

              stopStartStream(File);
            // -->
            </script>
            <script language="JavaScript" for="Player" event="OnUserWindowChanged(theID, theXPos, theYPos, theWidth, theHeight, theState, isForced)">
            <!--
            {
              if (theID < 32 && theID == currentSelecetdIndex) {
                areas[theID].box.x = parseInt(theXPos*img_width/9999, 10);
                areas[theID].box.w = parseInt(theWidth*img_width/9999, 10);
                areas[theID].box.y = parseInt(theYPos*img_height/9999, 10);
                areas[theID].box.h = parseInt(theHeight*img_height/9999, 10);
                if ((theState & 0x000002) == 2) {
                  areas[theID].isEditing = true;
                } else {
                  areas[theID].dirty = true;
                  areas[theID].hasDragged = true;
                  areas[theID].updateAreaPositions();
                  areas[theID].isEditing = false;
                }
              }
            }
            //-->
            </script>
          </td>
          <td>
            <!--#include virtual="/incl/tiltbar.shtml" -->
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    <td colspan="3" align="center">
      <table border="0" cellpadding="0" cellspacing="0" valign="top">
        <tr>
          <td>
            <!--#include virtual="/incl/bars.shtml" -->
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    <td class="topTitle" align="center" colspan="3">
      <table border="0" cellpadding="0" cellspacing="0">
        <tr>
          <td class="button"><input type="button" value="" class="btnNormal" width="75" onClick="JavaScript:saveData()" onMouseOver="return showStatus(SaveBtnStatTxt)" onMouseOut="return showStatus('')" id="PrivMskDome_Save2Btn"></td>
          <td class="button"><br /></td>
          <td class="button"><input type="button" width="75" onClick="JavaScript:resetValues()" value="" class="btnNormal" onMouseOver="return showStatus(ResBtnStatTxt)" onMouseOut="return showStatus('')" id="PrivMskDome_reset2Btn"></td>
        </tr>
      </table>
      <input type="hidden" name="action" value="">
      <input type="hidden" name="group" value="">
      <input type="hidden" name="AreaName" value="">
      <input type="hidden" name="Enabled" value="">
</form>

<!--#if expr="$queue != no" -->
<form action="/sm/sm.srv" method="POST">
      <table border="0" cellpadding="3" cellspacing="0" width="100%">
        <tr>
          <td class="subTitle" colspan="5" align="left" class="evenItem"><span id="queSetTxt"></span></td>
        </tr>
          <!--#include virtual="/sm/sm.srv?action=get_htmlform&get=root.PTZ.Various.V$camnbr$.CtlQueueing&pre_format=<tr><TD>&middle_format=:%26nbsp;</TD><TD>&end_format=</FONT></TD></TR>" -->
          <!--#include virtual="/sm/sm.srv?action=get_htmlform&get=root.PTZ.Various.V$camnbr$.CtlQueueLimit&pre_format=<tr><TD>&middle_format=:%26nbsp;</TD><TD>&end_format=</FONT></TD></TR>" -->
        <tr>
          <td align="left" colspan="5" class="evenItem">
            <input type="hidden" name="action" value="modify">
            <input type="button" class="btnNormal" value="Apply" onClick="enableQueue(this.form)">
            <input type="hidden" name="camera" value="<!--#echo var="camnbr" option="encoding:url" -->">
          </td>
        </tr>
      </table>
</form>
<!--#endif -->

<!--#if expr="$queueUsers = yes" -->
      <table border="0" cellpadding="3" cellspacing="0" width="100%">
        <tr>
          <td class="subTitle" colspan="5" align="left"><span id="queUsersTxt"></span></td>
        </tr>
        <tr>
          <td nowrap class="oddItem"><span id="quStTxt"></span></td>
          <td class="oddItem"><input type="text" name="ptzqstatus" value="" size="65" disabled></td>
          <td nowrap class="oddItem" align="right"><span id="poIQuTxt"></span></td>
          <td class="oddItem"><input type="text" name="ptzqpos" value="" size="12" disabled></td>
          <td class="oddItem"><br /></td>
        </tr>
        <tr>
          <td nowrap class="oddItem" nowrap><span id="tiReTxt"></span></td>
          <td class="oddItem" nowrap><input type="text" name="ptzqtleft" value="" size="10" disabled>&nbsp;<span id="secsTxt"></span></td>
          <td class="oddItem" colspan="2" align="right">
            <input type="hidden" NAME="ptzqcontrol" VALUE="request">
            <input type="hidden" NAME="ptzqcamera" VALUE="<!--#echo var="camnbr" option="encoding:url" -->">
            <input type="hidden" NAME="ptzqtagresponse" VALUE="yes">
            <input type="button" NAME="ptzqlabel" class="btnLarge" VALUE="Request control" onClick="JavaScript:ctlReq(this.form)">
            <input type="hidden" NAME="ptzqcontrol" VALUE="query">
            <input type="hidden" NAME="ptzqtagresponse" VALUE="yes">
            <input type="hidden" NAME="ptzqcamera" VALUE="<!--#echo var="camnbr" option="encoding:url" -->">
          </td>
        </tr>
        <SCRIPT LANGUAGE="JavaScript">ctlStart();</SCRIPT>
        <tr>
          <td colspan="5" align="center" class="oddItem"><br /></td>
        </tr>
      </table>
<!--#endif -->
    </td>
  </tr>
</table>

<!--#include virtual="/incl/bottom_incl.shtml" -->
