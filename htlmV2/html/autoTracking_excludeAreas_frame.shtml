<!--#set var="helpURL" val="javascript:launch('/help/autotracking_ExAr_h.shtml')" -->
<!--#set var="WizardFormAction" val="noAction" -->
<!--#set var="CustomWizFormAction" val="autoTracking_excludeAreas_frame.shtml?id=$ssi_request_id$" -->
<!--#set var="selection" val="autotracking_ExAr" -->

<!--#set var="activeMenu" val="dome" -->
<!--#set var="activeMenu1" val="autotracking" -->
<!--#set var="activePage" val="AuTrExArea" -->

<!--#if expr="_$nbr = _" --><!--#set var="nbr" val="0" --><!--#endif -->
<!--#if expr="$nbr = 0" --><!--#set var="camnbr" val="1" -->
<!--#elif expr="$nbr = 1" --><!--#set var="camnbr" val="2" -->
<!--#elif expr="$nbr = 2" --><!--#set var="camnbr" val="3" -->
<!--#elif expr="$nbr = 3" --><!--#set var="camnbr" val="4" -->
<!--#endif -->

<!--#set var="root_Image_I$nbr$_Stream_Duration" val="0" -->

  <!--#set var="resolution" val="480x270" -->
<!--#set var="size" val="1" -->
<!--#set var="external" val="no" -->
<!--#set var="UseAudio" val="no" -->
<!--#set var="UseRel" val="no" -->
<!--#set var="useWithCam" val="no" -->
<!--#set var="ptzgui" val="yes" -->
<!--#set var="MovePan" val="abs" -->
<!--#set var="MoveTilt" val="abs" -->
<!--#set var="cgi_path" val="axis-cgi" -->
<!--#set var="root_Layout_ShowAMCToolbar" val="no" -->
<!--#set var="root_PTZ_Various_V$camnbr$_PanEnabled" val="true" -->
<!--#set var="root_PTZ_Various_V$camnbr$_TiltEnabled" val="true" -->
<!--#set var="root_PTZ_Various_V$camnbr$_ZoomEnabled" val="true" -->

<!--#include virtual="/sm/sm.srv?action=get&group=AutoTracking.A0.ExcludeArea,Image.I0.Appearance.Rotation,PTZ.UserCtlQueue,PTZ.Various.V$camnbr$,PTZ.Auxiliary.A$camnbr$,PTZ.Support,PTZ.ImageSource,PTZ.Limit" -->

<!--#if expr="$(root_PTZ_Various_V$camnbr$_CtlQueueing) = true" -->
  <!--#set var="queueUsers" val="yes" -->
<!--#endif -->

<!--#if expr="_$root_PTZ_UserCtlQueue_U2_UserGroup != _" -->
  <!--#set var="queue" val="no" -->
<!--#elif expr="$glob_PTZCamera = yes" -->
  <!--#set var="queue" val="no" -->
<!--#endif -->

<!--#include virtual="/axis-cgi/view/imagesize.cgi?format=ssi&camera=$camnbr$&resolution=$resolution$&rotation=0" -->
<!--#include virtual="/incl/top_incl.shtml" -->
<!--#include virtual="/incl/setabsrel.shtml" -->
<!--#set var="showPTZCrosshair" val="no" -->

<style type="text/css">

.display   { font-family: courier new, courier, fixed; font-size: 11px; border: 1px solid black; background-color: white; color:black; }
.dragbox_selected   { position: absolute; background:#3366cc; filter:alpha(opacity=60); -moz-opacity:0.6; -khtml-opacity:0.6; opacity:0.6; z-index: 500; }
.dragbox_unselected   { position: absolute; background:#cc3366; filter:alpha(opacity=60); -moz-opacity:0.6; -khtml-opacity:0.6; opacity:0.6; z-index: 490; }
.boxborder { position: absolute; background-color:transparent; filter:alpha(opacity=0); -moz-opacity:0; -khtml-opacity:0; opacity:0; z-index: 501; }

</style>

<script src="/incl/pos.js"></script>
<script src="/incl/activeX.js"></script>

<script language="JavaScript">
<!--
var langObjAutoTrackExlAreasFrame = new Language("autoTracking", "autoTracking_excludeAreas_frame");

<!--#include virtual="/incl/functions.shtml" -->

if ((navigator.appName == "Microsoft Internet Explorer") && (navigator.platform != "MacPPC") && (navigator.platform != "Mac68k")) {
  var browser = "IE"
} else {
  var browser = "Netscape"
}

function area(name, enabled, position, param)
{
  this.box = new Box(0,0,0,0) //The area's current location in the image (in pixels)
  this.enabled = enabled;
  this.position = position; //Current cordinates of the area.
  this.name=name;  //Name of the area
  this.param=param; //Parameter used when adding, updating and removing an area.
  this.dirty=false; //True if an area is changed.
  this.isEditing=false; //True during the change of an area, ie while dragging or resizing area.
  this.areaID = 30;
  this.dragArea = null; //Element which the area is contained in
  this.dragArea_Box = null; //The dragArea's total left and top offset
  this.dragbox = null; //The area itself
  this.borderN = null; //The area's upper border, used for resize up.
  this.borderE = null; //The area's right border, used for resize to the right.
  this.borderS = null; //The area's upper border, used for resize down.
  this.borderW = null; //The area's upper border, used for resize to the left.

  this.oldMousePosX = 0;
  this.oldMousePosY = 0;

  this.init = function(dragArea, areaID) {
    this.areaID = areaID;
    this.dragArea = document.getElementById(dragArea);
    this.dragArea_Box = getElementPosition(dragArea);

    var db = document.createElement("DIV");
    document.body.appendChild(db);
    this.dragbox = db;
    db.exAr_nr = areaID;
    db.className = 'dragbox_unselected';
    db.id = 'dragbox' + areaID;
    db.style.visibility = 'hidden';
    db.obj = this;
    this.handle_db = db;

    var bn = document.createElement("DIV");
    document.body.appendChild(bn);
    this.borderN = bn
    bn.exAr_nr = areaID;
    bn.className = 'boxborder';
    bn.id = 'borderN' + areaID;
    bn.style.visibility = 'hidden';
    bn.obj = this;
    this.handle_bn = bn;

    var be = document.createElement("DIV");
    document.body.appendChild(be);
    this.borderE = be;
    be.exAr_nr = areaID;
    be.className = 'boxborder';
    be.id = 'borderE' + areaID;
    be.style.visibility = 'hidden';
    be.obj = this;
    this.handle_be = be;

    var bs = document.createElement("DIV");
    document.body.appendChild(bs);
    this.borderS = bs;
    bs.exAr_nr = areaID;
    bs.className = 'boxborder';
    bs.id = 'borderS' + areaID;
    bs.style.visibility = 'hidden';
    bs.obj = this;
    this.handle_bs = bs;

    var bw = document.createElement("DIV");
    document.body.appendChild(bw);
    this.borderW = bw;
    bw.exAr_nr = areaID;
    bw.className = 'boxborder';
    bw.id = 'borderW' + areaID;
    bw.style.visibility = 'hidden';
    bw.obj = this;
    this.handle_bw = bw;
  }

  this.noAction = function(event) {
    return true;
  }

  this.stopDragging = function(event) {
    if (!event) event = window.event;
    var o = (this.obj ? this.obj : window.document.obj);

    window.document.onmousemove = o.noAction;
    window.document.onmouseup = o.noAction;
    o.isEditing = false;

    o.dragbox.style.cursor = 'move';
    o.oldMousePosX = 0; // Reset after moveBox(mouseX, mouseY)
    o.oldMousePosY = 0;
    o.setBorders()

    o.updateAreaPositions();

    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false;
  }

  this.setBorders = function() {
    this.dragbox.onmousemove = this.noAction;
    this.dragbox.onmousedown = this.moveHandler;
    this.dragbox.onmouseup = this.noAction;

    this.dragArea.onmousemove = this.noAction;
    this.dragArea.onmousedown = this.noAction;
    this.dragArea.onmouseup = this.noAction;

    this.borderN.style.left = this.box.x + this.dragArea_Box.left;
    this.borderN.style.top = this.box.y + this.dragArea_Box.top;
    this.borderN.style.width = this.box.w;
    this.borderN.style.height = 10;
    this.borderN.style.visibility = 'visible'
    this.borderN.style.cursor = 'n-resize';
    this.borderN.style.background = "blue";
    this.borderN.onmousedown = this.resizeHandlerN;
    this.borderN.onmouseup = this.noAction;
    this.borderN.onmousemove = this.noAction;

    this.borderE.style.left = this.box.x + this.dragArea_Box.left + this.box.w - 10;
    this.borderE.style.top = this.box.y + this.dragArea_Box.top;
    this.borderE.style.width = 10;
    this.borderE.style.height = this.box.h;
    this.borderE.style.visibility = 'visible'
    this.borderE.style.cursor = 'e-resize';
    this.borderE.style.background = "blue";
    this.borderE.onmousedown = this.resizeHandlerE;
    this.borderE.onmouseup = this.noAction;
    this.borderE.onmousemove = this.noAction;

    this.borderS.style.left = this.box.x + this.dragArea_Box.left;
    this.borderS.style.top = this.box.y + this.dragArea_Box.top + this.box.h - 10;
    this.borderS.style.width = this.box.w;
    this.borderS.style.height = 10;
    this.borderS.style.visibility = 'visible'
    this.borderS.style.cursor = 's-resize';
    this.borderS.style.background = "blue";
    this.borderS.onmousedown = this.resizeHandlerS;
    this.borderS.onmouseup = this.noAction;
    this.borderS.onmousemove = this.noAction;

    this.borderW.style.left = this.box.x + this.dragArea_Box.left;
    this.borderW.style.top = this.box.y + this.dragArea_Box.top;
    this.borderW.style.width = 10;
    this.borderW.style.height = this.box.h;
    this.borderW.style.visibility = 'visible'
    this.borderW.style.cursor = 'w-resize';
    this.borderW.style.background = "blue";
    this.borderW.onmousedown = this.resizeHandlerW;
    this.borderW.onmouseup = this.noAction;
    this.borderW.onmousemove = this.noAction;
    return;
  }

  this.removeBorders = function() {
    this.dragbox.onmousemove = this.noAction;
    this.dragbox.onmousedown = this.noAction;
    this.dragbox.onmouseup = this.noAction;

    this.borderN.style.visibility = 'hidden'
    this.borderN.onmousedown = this.noAction;
    this.borderN.onmouseup = this.noAction;
    this.borderN.onmousemove = this.noAction;

    this.borderE.style.visibility = 'hidden'
    this.borderE.onmousedown = this.noAction;
    this.borderE.onmouseup = this.noAction;
    this.borderE.onmousemove = this.noAction;

    this.borderS.style.visibility = 'hidden'
    this.borderS.onmousedown = this.noAction;
    this.borderS.onmouseup = this.noAction;
    this.borderS.onmousemove = this.noAction;

    this.borderW.style.visibility = 'hidden'
    this.borderW.onmousedown = this.noAction;
    this.borderW.onmouseup = this.noAction;
    this.borderW.onmousemove = this.noAction;
    return;
  }

  this.resizeHandlerN = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeN(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeHandlerE = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeE(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeHandlerS = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeS(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeHandlerW = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.resizeW(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.moveHandler = function(event) {
    if (!event) event = window.event;
    var mpos = getMousePosition(event);
    var o = (this.obj ? this.obj : window.document.obj);
    o.moveBox(mpos.x, mpos.y);
    event.cancelBubble = true;
    if (event.stopPropagation) event.stopPropagation();
    return false; // Returning false prevents event bubbling
  }

  this.resizeN = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosY != 0) {
      this.dirty = true;
      var d = mouseY - this.oldMousePosY;
      if (this.box.y + d < 0) {
        // Resize outside stream
        this.box.h += this.box.y;
        this.box.y = 0;
      } else if (this.box.h - d < 20) {
        this.box.y += this.box.h - 20;
        this.box.h = 20;
      } else {
        this.box.y += d;
        this.box.h -= d;
      }

      var t = this.dragArea_Box.top + this.box.y;
      this.dragbox.style.top = t;
      this.dragbox.style.height = this.box.h;
      this.borderN.style.top = t;
      this.borderE.style.top = t;
      this.borderW.style.top = t;
      this.borderE.style.height = this.box.h;
      this.borderW.style.height = this.box.h;
    }
    this.oldMousePosY = mouseY
    this.borderN.onmousemove = this.resizeHandlerN;
    this.dragbox.onmousemove = this.resizeHandlerN;
    this.dragArea.onmousemove = this.resizeHandlerN;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderN.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
  }

  this.resizeE = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosX != 0) {
      this.dirty = true;
      var d = mouseX - this.oldMousePosX;
      if (this.box.w + d < 20) {
        this.box.w = 20;
      } else if (this.box.x + this.box.w + d > this.dragArea.width ) {
        this.box.w = this.dragArea.width - this.box.x;
      } else {
        this.box.w += d;
      }

      this.dragbox.style.width = this.box.w;
      this.borderE.style.left = this.dragArea_Box.left + this.box.x + this.box.w - 10;
      this.borderN.style.width = this.box.w;
      this.borderS.style.width = this.box.w;
    }
    this.oldMousePosX = mouseX
    this.borderE.onmousemove = this.resizeHandlerE;
    this.dragbox.onmousemove = this.resizeHandlerE;
    this.dragArea.onmousemove = this.resizeHandlerE;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderE.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
  }

  this.resizeS = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosY != 0) {
      this.dirty = true;
      var d = mouseY - this.oldMousePosY;
      if (this.box.h + d < 20) {
        this.box.h = 20;
      } else if (this.box.y + this.box.h + d > this.dragArea.height) {
        this.box.h = this.dragArea.height - this.box.y;
      } else {
        this.box.h = this.box.h + d;
      }

      this.dragbox.style.height = this.box.h;
      this.borderS.style.top = this.dragArea_Box.top + this.box.y + this.box.h - 10;
      this.borderE.style.height = this.box.h;
      this.borderW.style.height = this.box.h;
    }
    this.oldMousePosY = mouseY
    this.borderS.onmousemove = this.resizeHandlerS;
    this.dragbox.onmousemove = this.resizeHandlerS;
    this.dragArea.onmousemove = this.resizeHandlerS;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderS.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
  }

  this.resizeW = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosX != 0) {
      this.dirty = true;
      var d = mouseX - this.oldMousePosX;
      if (this.box.x + d < 0) {
        this.box.w += this.box.x;
        this.box.x = 0;
      } else if (this.box.w - d < 20) {
        this.box.x += this.box.w - 20;
        this.box.w = 20;
      } else {
        this.box.x += d;
        this.box.w -= d;
      }
      var l = this.box.x + this.dragArea_Box.left;
      this.dragbox.style.left = l;
      this.dragbox.style.width = this.box.w;
      this.borderW.style.left = l;
      this.borderN.style.left = l;
      this.borderS.style.left = l;
      this.borderN.style.width = this.box.w;
      this.borderS.style.width = this.box.w;
    }
    this.borderW.onmousemove = this.resizeHandlerW;
    this.dragbox.onmousemove = this.resizeHandlerW;
    this.dragArea.onmousemove = this.resizeHandlerW;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderW.onmouseup = this.stopDragging;
    this.dragbox.onmouseup = this.stopDragging;
    this.oldMousePosX = mouseX
  }

  this.moveBox = function(mouseX, mouseY) {
    this.isEditing = true;
    if (this.oldMousePosX != 0) {
      this.dirty = true;
      var dx = mouseX - this.oldMousePosX;
      if (this.box.x + dx < 0) {
        this.box.x = 0;
      } else if (this.box.x + this.box.w + dx > this.dragArea.width) {
        this.box.x = this.dragArea.width - this.box.w;
      } else {
        this.box.x += dx;
      }
      var dy = mouseY - this.oldMousePosY;
      if (this.box.y + dy < 0) {
        this.box.y = 0;
      } else if (this.box.y + this.box.h + dy > this.dragArea.height) {
        this.box.y = this.dragArea.height - this.box.h;
      } else {
        this.box.y += dy;
      }
      this.dragbox.style.top = this.dragArea_Box.top + this.box.y;
      this.dragbox.style.left = this.dragArea_Box.left + this.box.x;
    }

    this.oldMousePosX = mouseX
    this.oldMousePosY = mouseY
    this.dragArea.onmousemove = this.moveHandler;
    this.dragArea.onmouseup= this.stopDragging;
    this.dragArea.onmousedown = this.noAction;
    this.dragbox.onmousemove = this.moveHandler;
    this.dragbox.onmouseup = this.stopDragging;
    window.document.onmousemove = this.stopDragging;
    window.document.onmouseup = this.stopDragging;
    window.document.obj = this;
    this.borderN.style.visibility = 'hidden';
    this.borderE.style.visibility = 'hidden';
    this.borderS.style.visibility = 'hidden';
    this.borderW.style.visibility = 'hidden';
  }

  this.updateAreaPositions = function() {
    var now = new Date();
    var posQuery = "/axis-cgi/view/ptzcoordcalc.cgi";
    posQuery += "?action=getpantilt&responseformat=plain&generate_header=yes";
    posQuery += "&imageresolution=<!--#echo var="img_width" option="encoding:url" -->x<!--#echo var="img_height" option="encoding:url" -->&imagerotation=<!--#echo var="root_Image_I$nbr$_Appearance_Rotation" option="encoding:url" -->";
    posQuery += "&coordinates=" + this.box.x+","+this.box.y+ ":" + this.box.x+","+(this.box.y+this.box.h) + ":" + (this.box.x+this.box.w)+","+this.box.y + ":" + (this.box.x+this.box.w)+","+(this.box.y+this.box.h);
    posQuery += "&timestamp=" + now.getTime();
    this.position = sendAction(posQuery, "GET");
    delete now;
  }

}

function noAction(event)
{
  return true;
}

function getElementPosition(elemID)
{
  var offsetTrail = document.getElementById(elemID);
  var offsetLeft = 0;
  var offsetTop = 0;
  while (offsetTrail) {
    offsetLeft += offsetTrail.offsetLeft;
    offsetTop += offsetTrail.offsetTop;
    offsetTrail = offsetTrail.offsetParent;
  }
  if (navigator.userAgent.indexOf("Mac") != -1 && typeof document.body.leftMargin != "undefined") {
    offsetLeft += parseInt(document.body.leftMargin, 10);
    offsetTop += parseInt(document.body.topMargin, 10);
  }
  return {left:offsetLeft, top:offsetTop};
}

function drawArea(areaID, editing)
{
  if (currentSelecetdIndex != 30 && areaID == currentSelecetdIndex && startedEditingArea)
    return;

  if (areaID != 30) {
    var areaPos = areas[areaID].position;
    var area_x = parseInt(areas[areaID].box.x, 10);
    var area_w = parseInt(areas[areaID].box.w, 10);
    var area_y = parseInt(areas[areaID].box.y, 10);
    var area_h = parseInt(areas[areaID].box.h, 10);
    if (editing)
      var areaName = document.getElementById("newAreaName").value;
    else
      var areaName = areas[areaID].name;
    var areaEnabled = (areas[areaID].enabled == "yes");
  } else {
    var area_w = parseInt(<!--#echo var="img_width" option="encoding:javascript" --> / 4, 10);
    var area_h = parseInt(<!--#echo var="img_height" option="encoding:javascript" --> / 4, 10);
    var area_x = parseInt(<!--#echo var="img_width" option="encoding:javascript" --> * 3 / 8, 10);
    var area_y = parseInt(<!--#echo var="img_height" option="encoding:javascript" --> * 3 / 8, 10);
    var areaName = document.getElementById("newAreaName").value;
    var areaEnabled = true;
  }

  if (browser == "IE") {
    if (area_w <= 0 || area_h <= 0) {
      try { document.Player.RemoveUserWindow(areaID); }
      catch(e) {}
      return;
    }

    var x = parseInt(area_x*9999/<!--#echo var="img_width" option="encoding:javascript" -->, 10)
    var y = parseInt(area_y*9999/<!--#echo var="img_height" option="encoding:javascript" -->, 10)
    var w = parseInt(area_w*9999/<!--#echo var="img_width" option="encoding:javascript" -->, 10)
    var h = parseInt(area_h*9999/<!--#echo var="img_height" option="encoding:javascript" -->, 10)
    var flags = 0

    document.getElementById('x_' + areaID).value = x;
    document.getElementById('y_' + areaID).value = y;
    document.getElementById('w_' + areaID).value = w;
    document.getElementById('h_' + areaID).value = h;
    if (editing == true) {
      areaColor = 0xCC6633;
      flags |= 1; // resizable
      flags |= 2; // movable
    } else {
      areaColor = 0x6633CC;
    }
    if (areaEnabled)
      flags |= 4 // fill;
    document.Player.SetUserWindow( areaID, areaName, x, y, w, h, areaColor, 50, flags);
  } else {
    if (areaID == 30)
      areaID = areas.length - 1;
    if (areas[areaID].isEditing)
      return;
    imagepos = getPos(areas[areaID].dragArea)
    if (area_x < 0) {
      area_w += area_x;
      area_x = 0;
    }
    if (area_x + area_w > <!--#echo var="img_width" option="encoding:javascript" -->)
      area_w = <!--#echo var="img_width" option="encoding:javascript" --> - area_x;
    if (area_y < 0) {
      area_h += area_y;
      area_y = 0;
    }
    if (area_y + area_h > <!--#echo var="img_height" option="encoding:javascript" -->)
      area_h = <!--#echo var="img_height" option="encoding:javascript" --> - area_y;
    var left = imagepos.x + area_x;
    var top = imagepos.y + area_y
    var width = area_w;
    var height = area_h;
    var db = document.getElementById("dragbox" + areaID);
    if (width > 0 && height > 0) {
      if (currentSelecetdIndex == areaID || currentSelecetdIndex == 30 && areaID == areas.length - 1) {
        db.className = "dragbox_selected";
        db.onmousedown = areas[areaID].moveHandler;
        db.style.cursor = 'move';
        areas[areaID].setBorders()
      } else {
        db.className = "dragbox_unselected";
        db.onmousedown = areas[areaID].noAction;
        db.style.cursor = '';
        areas[areaID].removeBorders()
      }
      db.style.left = left
      db.style.top = top
      db.style.width = width
      db.style.height = height
      db.style.visibility = 'visible';
      areas[areaID].box.x = area_x;
      areas[areaID].box.y = area_y;
      areas[areaID].box.w = area_w;
      areas[areaID].box.h = area_h;
    } else {
      db.style.visibility = 'hidden';
    }
  }
}

var drawAllAreas_timeout;
function drawAllAreas()
{
  clearTimeout(drawAllAreas_timeout);
  for (var i = 0; i < areas.length; i++) {
    drawArea(i, i==currentSelecetdIndex);
  }

  drawAllAreas_timeout = window.setTimeout(function() {drawAllAreas();}, 1000);
}

<!--#include virtual="/incl/statusPtz.shtml" --> 

var areas = new Array();
var area_backup = false;

function onLoad()
{
  init();

  var inputs = document.getElementById("idListForm").elements;
  var column1 = 73;
  var column2 = 4;
  var tmpOptionName;
  var indexes = new Array();

  if( inputs.length > 0) {
    for (var i = 0; i < 30; i++) {
      if (document.getElementsByName("root_AutoTracking_A0_ExcludeArea_E" + i + "_Name")[0]) {
        var name = document.getElementsByName("root_AutoTracking_A0_ExcludeArea_E" + i + "_Name")[0].value;
        var enabled = document.getElementsByName("root_AutoTracking_A0_ExcludeArea_E" + i + "_Enabled")[0].value;
        var position = document.getElementsByName("root_AutoTracking_A0_ExcludeArea_E" + i + "_Positions")[0].value;
        var param = "AutoTracking.A0.ExcludeArea.E" + i;
        areas.push(new area(name, enabled, position, param));
        indexes.push(i);
      }
    }

    for (i = 0; i < areas.length; i++) {
      var oOption = document.createElement("OPTION");
      document.getElementById("idAreaList").options.add(oOption);
      var tmpText = getPaddedString(areas[i].name, column1, true, false);
      tmpText += getPaddedString(areas[i].enabled, column2, false, false);
      oOption.innerHTML = tmpText;
      oOption.value = indexes[i];
    }
  }
  //Create a new area used when adding new exclude area.
  var name = "";
  var enabled = "yes";
  var position = "";
  var param = "AutoTracking.A0.ExcludeArea.E";
  var newArea = new area(name, enabled, position, param);
  areas.push(newArea);

  if (browser != "IE")
    for (i = 0; i < areas.length; i++)
      areas[i].init("stream", i);

  updatePositions();
  drawAllAreas();
}

function onResize()
{
  if (browser != "IE") {
    var stream_box = getElementPosition("stream");
    for (var i = 0; i < areas.length; i++) {
      areas[i].dragArea_Box = stream_box;
    }
    drawAllAreas();
  }
}

var startedEditingArea = false;
var dirty = false;

function addArea()
{
  if (checkIsDirty())
    return;
  if (areas.length >= 30) {
    alert( langObjAutoTrackExlAreasFrame.getText("maxAreas1Alrt")+" 30 "+langObjAutoTrackExlAreasFrame.getText("maxAreas2Alrt"));
    return;
  }
  document.getElementsByName('action')[0].value = "add";
  document.getElementsByName('group')[0].value = "AutoTracking.A0.ExcludeArea";
  document.getElementsByName('Enabled')[0].value = "yes";
  var areaName = "Exclude Area " + areas.length;
  document.getElementById("newAreaName").value = areaName;
  document.getElementById("idAreaList").selectedIndex = -1;
  currentSelecetdIndex = 30;
  startedEditingArea = true;
  drawArea(30, true);
  enableSave(true);
}

function removeArea()
{
  if (checkIsDirty())
    return;
  var areaList = document.getElementById("idAreaList");
  var selIndex =  areaList.selectedIndex;
  if(selIndex >= 0) {
    document.getElementsByName('action')[0].value = "remove";
    document.getElementsByName('group')[0].value = areas[selIndex].param;
    startedEditingArea = false;
    SubmitForm();
  } else {
    alert( langObjAutoTrackExlAreasFrame.getText("removeAreaAlert") );
  }
}

var drawTimeout = null;
var currentSelecetdIndex = -1;
function editArea()
{
  if (checkIsDirty())
    return;

  var areaList = document.getElementById("idAreaList");
  if(areaList.selectedIndex>= 0) {
    if (browser == "IE") {
      try { document.Player.RemoveUserWindow(30); }
      catch(e) {}
    } else {
      if (currentSelecetdIndex == 30) {
        areas[areas.length - 1].removeBorders();
        areas[areas.length - 1].dragbox.style.visibility = "hidden";
      }
    }

    currentSelecetdIndex = areaList.selectedIndex;
    document.getElementsByName('action')[0].value = "update";
    var name = areas[currentSelecetdIndex].name;
    var enabled = areas[currentSelecetdIndex].enabled;
    var position = areas[currentSelecetdIndex].position;
    var param = areas[currentSelecetdIndex].param;
    document.getElementsByName('group')[0].value = param;
    document.getElementById("newAreaName").value = name;
    document.getElementsByName('Enabled')[0].value = enabled;
    var areaPos = position;

    area_backup = new area(name, enabled, position, param);
    area_backup.box = areas[currentSelecetdIndex].box;
    area_backup.areaID = areas[currentSelecetdIndex].areaID;

    var pan = getPanArray(areaPos);
    var tilt = getTiltArray(areaPos);

    var pan_center = getPanCenter(pan.min, pan.max);
    var tilt_center = getTiltCenter(tilt.min, tilt.max);

    startedEditingArea = false;
    enableSave(true);
    gotoPTZ(pan_center, tilt_center);

    clearTimeout(drawTimeout);
    drawTimeout = window.setTimeout(function(){
      updatePositions();
      drawTimeout = window.setTimeout(function(){
        drawArea(currentSelecetdIndex, true);
      },500)
    }, 1000);
  } else {
    alert( langObjAutoTrackExlAreasFrame.getText("editAreaAlert") );
  }
}

function toggleArea()
{
  if (checkIsDirty())
    return;
  var areaList = document.getElementById("idAreaList");
  var selIndex =  areaList.selectedIndex;
  if(selIndex >= 0) {
    var areaIndex = areaList.options[selIndex].value;
    document.getElementsByName('action')[0].value = "toggle";
    document.getElementsByName('group')[0].value = "AutoTracking.A0.ExcludeArea.E" + areaIndex;
    document.getElementsByName("Enabled")[0].value = (document.getElementsByName("root_AutoTracking_A0_ExcludeArea_E" + areaIndex + "_Enabled")[0].value == "no" ? "yes" : "no");
    startedEditingArea = false;

    SubmitForm();
  } else {
    alert( langObjAutoTrackExlAreasFrame.getText("toggleAreaAlert") );
  }
}

function checkIsDirty()
{
  var isDirty = false;
  if (currentSelecetdIndex != -1
      && areas[(currentSelecetdIndex == 30 ? areas.length - 1 : currentSelecetdIndex)].dirty)
  {
    if ( confirm( langObjAutoTrackExlAreasFrame.getText("changesLostConfm") ) )
    {
      if (area_backup)
      {
        areas[currentSelecetdIndex].box = area_backup.box;
        areas[currentSelecetdIndex].enabled = area_backup.enabled;
        areas[currentSelecetdIndex].position = area_backup.position;
        areas[currentSelecetdIndex].name = area_backup.name;
        areas[currentSelecetdIndex].param = area_backup.param;
        areas[currentSelecetdIndex].dirty = false;
        areas[currentSelecetdIndex].isEditing = false;
        areas[currentSelecetdIndex].areaID = area_backup.areaID;
        delete area_backup;
        area_backup = false;
      }
      document.getElementsByName('action')[0].value = "";
      document.getElementsByName('group')[0].value = "";
      document.getElementsByName('Enabled')[0].value = "";
      document.getElementById("newAreaName").value = "";
      currentSelecetdIndex = -1;
      startedEditingArea = false;
    }
    else
    {
      if  (currentSelecetdIndex != 30)
        document.getElementById("idAreaList").selectedIndex = currentSelecetdIndex;
      else
        document.getElementById("idAreaList").selectedIndex = -1;
      isDirty = true;
    }
  }
  return isDirty;
}

function resetValues()
{
  document.location.reload(true);
}

function saveData()
{
  if (browser == "IE") {
    var x = parseInt(document.getElementById('x_' + currentSelecetdIndex).value*<!--#echo var="img_width" option="encoding:javascript" -->/9999, 10)
    var y = parseInt(document.getElementById('y_' + currentSelecetdIndex).value*<!--#echo var="img_height" option="encoding:javascript" -->/9999, 10)
    var w = parseInt(document.getElementById('w_' + currentSelecetdIndex).value*<!--#echo var="img_width" option="encoding:javascript" -->/9999, 10)
    var h = parseInt(document.getElementById('h_' + currentSelecetdIndex).value*<!--#echo var="img_height" option="encoding:javascript" -->/9999, 10)
  } else {
    if (currentSelecetdIndex == 30)
      areaID = areas.length - 1;
    else
      areaID = currentSelecetdIndex;
    var y = areas[areaID].box.y
    var x = areas[areaID].box.x
    var w = areas[areaID].box.w
    var h = areas[areaID].box.h
    if (x < 0) x = 0;
    if (y < 0) y = 0;
  }

  var inputElName = document.getElementById("newAreaName");
  var inputName = inputElName.value;
  if( !checkIsUniqueName( inputName ) )
  {
    alert( langObjAutoTrackExlAreasFrame.getText("nameInUseAlrt") );
    inputElName.focus();
    inputElName.select();
    return false;
  }
  document.getElementsByName('AreaName')[0].value = escape(inputName);
  if ("<!--#echo var="root_Image_I$nbr$_Appearance_Rotation" option="encoding:javascript" -->" != "0") {
    document.getElementsByName('Pan1')[0].value = x+w;
    document.getElementsByName('Pan2')[0].value = x;
    document.getElementsByName('Tilt1')[0].value = y+h;
    document.getElementsByName('Tilt2')[0].value = y;
  } else {
    document.getElementsByName('Pan1')[0].value = x;
    document.getElementsByName('Pan2')[0].value = x+w;
    document.getElementsByName('Tilt1')[0].value = y;
    document.getElementsByName('Tilt2')[0].value = y+h;
  }

  SubmitForm();
}

function checkIsUniqueName( name )
{
  var len = areas.length;
  var isUnique = true;
  for (var i = 0; i < len && isUnique; i++)
  {
    if( i != currentSelecetdIndex )
    {
      if( areas[i] && areas[i].name == name )
      {
        isUnique = false;
      }
    }
  }
  return isUnique;
}

function getPanWidth(minPan, maxPan)
{
  var w1 = maxPan - minPan;
  var w2 = (180 - maxPan) + (180 + minPan);

  return (w1 < w2 ? w1 : w2);
}

function getPanCenter(minPan, maxPan)
{
  var w1 = maxPan - minPan;
  var w2 = (180 - maxPan) + (180 + minPan);

  if (w1 < w2) {
    return minPan + w1/2;
  } else {
    if (minPan - w2/2 > -180)
      return minPan - w2/2;
    else
      return maxPan + w2/2;
  }
}

function getPanArray(strCordinates)
{
  strCordinates = strCordinates.split(":");
  var panMax = -10000;
  var panMin = 10000;
  for (var i = 0; i < strCordinates.length; i++) {
    var pan = parseFloat(strCordinates[i].split(",")[0]);
    if (panMax < pan)
      panMax = pan;
    if (panMin > pan)
      panMin = pan;
  }
  return {min:panMin, max:panMax}
}

function checkRange(val, vmin, vmax)
{
  return ((val) < (vmin) ? (0) : (val) > (vmax) ? (0) : (val));
}

function getTiltCenter(minTilt, maxTilt)
{
  return (maxTilt - minTilt)/2 + minTilt;
}

function getTiltArray(strCordinates)
{
  strCordinates = strCordinates.split(":");
  var tiltMax = -10000;
  var tiltMin = 10000;
  for (var i = 0; i < strCordinates.length; i++) {
    var tilt = parseFloat(strCordinates[i].split(",")[1]);
    if (tiltMax < tilt)
      tiltMax = tilt;
    if (tiltMin > tilt)
      tiltMin = tilt;
  }
  return {min:tiltMin, max:tiltMax}
}

function gotoPTZ(pan,tilt)
{
  if ("<!--#echo var="root_Image_I$nbr$_Appearance_Rotation" option="encoding:javascript" -->" != "0") {
    pan = -pan;
    tilt = -tilt;
  }
  var now = new Date();
  sendAction("/axis-cgi/com/ptz.cgi?camera=1&imagewidth=<!--#echo var="img_width" option="encoding:url" -->&imageheight=<!--#echo var="img_height" option="encoding:url" -->&pan=" + pan + "&tilt=" + tilt + "&timestamp=" + now.getTime(), "GET");
}

var currentPositions = "";
var updatePositions_timer = null;
var updatePositions_request = AxisConnectionFactory.createAjaxConnection();
updatePositions_request.setOverrideMimeType( 'text/plain' );
function updatePositions()
{
  clearTimeout(updatePositions_timer);
  if (areas.length > 0) {
    var positions = "";
    for (var i = 0; i < areas.length-1; i++) {
      if (!areas[i].isEditing) {
        if (positions != "" && areas[i].position != "")
          positions += ":";
        positions += areas[i].position;
      }
    }
    if (positions == "") {
      updatePositions_timer = window.setTimeout(function(){updatePositions();}, 1000);
      return;
    }
    var now = new Date();
    AxisConnectionFactory.sendAsync(["GET", "/axis-cgi/view/ptzcoordcalc.cgi?action=getpixel&responseformat=plain&imageresolution=<!--#echo var="img_width" option="encoding:url" -->x<!--#echo var="img_height" option="encoding:url" -->&imagerotation=<!--#echo var="root_Image_I$nbr$_Appearance_Rotation" option="encoding:url" -->&generate_header=yes&coordinates=" + positions + "&timestamp=" + now.getTime()], null, updatePositions_onstatechange, updatePositions_request);
    delete now;
    clearTimeout(updatePositions_timer);
  }
}

function updatePositions_onstatechange()
{
  var MINWIDTH = 10;
  var MINHEIGHT = 10;

  if (updatePositions_request.getReadyState() == 4) {
    currentPositions = updatePositions_request.getResponseText();
    currentPositions = currentPositions.split(":");

    for (i = 0; i < areas.length-1; i++) {
      if (!areas[i].isEditing) {
        var areaPos = currentPositions[i*4 + 0] + ":" + 
                      currentPositions[i*4 + 1] + ":" + 
                      currentPositions[i*4 + 2] + ":" + 
                      currentPositions[i*4 + 3];
        var tmpPan = getPanArray(areaPos);
        var tmpTilt = getTiltArray(areaPos);
        if (tmpPan.min > -1000 && 
            tmpPan.max < 1000 && 
            tmpTilt.min > -1000 && 
            tmpTilt.max < 1000) {
          areas[i].box.x = tmpPan.min;
          areas[i].box.y = tmpTilt.min;
        } else {
          areas[i].box.x = -1;
          areas[i].box.y = -1;
        }

        areas[i].box.w = checkRange(tmpPan.max-tmpPan.min, 
                                    MINWIDTH,
                                    2*parseInt(<!--#echo var="img_width" option="encoding:javascript" -->, 10));
        areas[i].box.h = checkRange(tmpTilt.max-tmpTilt.min, 
                                    MINHEIGHT, 
                                    2*parseInt(<!--#echo var="img_height" option="encoding:javascript" -->, 10));

      }
    }
    clearTimeout(updatePositions_timer);
    updatePositions_timer = window.setTimeout(function(){updatePositions();}, 1000);
  }
}

var request = AxisConnectionFactory.createAjaxConnection();
request.setOverrideMimeType( 'text/plain' );
function sendAction(action, method)
{
  var responseText = AxisConnectionFactory.getResponseTextWith([method, action, false], null, request);
  return responseText;
}

function enableSave(enable)
{
  document.getElementById("AuTr_ExAr_SaveBtn").disabled = !enable;
  document.getElementById("AuTr_ExAr_resetBtn").disabled = !enable;
  document.getElementById("newAreaName").disabled = !enable;
}

var SaveBtnStatTxt;
var ResBtnStatTxt;
var AddBtnStatTxt;
var RemBtnStatTxt;
var EnDisBtnStatTxt;
function globalLanguageVars()
{
  SaveBtnStatTxt = langObjAutoTrackExlAreasFrame.getText("saveBtnStatTxt");
  ResBtnStatTxt = langObjAutoTrackExlAreasFrame.getText("resBtnStatTxt");
  AddBtnStatTxt = langObjAutoTrackExlAreasFrame.getText("addBtnStatTxt");
  RemBtnStatTxt = langObjAutoTrackExlAreasFrame.getText("remBtnStatTxt");
  EnDisBtnStatTxt = langObjAutoTrackExlAreasFrame.getText("enDisBtnStatTxt");
}

//-->
</script>
<!--#include virtual="/incl/ptz_incl.shtml" -->
<!--#include virtual="/incl/ptzctrlpanel_incl2.shtml" -->
</head>

<body <!--#include virtual="/incl/bodytag.shtml" --> onload="langObjAutoTrackExlAreasFrame.init();onLoad();" onresizeend="onResize();">
<!--
<!--#if expr="$action = add" -->
  <!--#include virtual="/axis-cgi/view/ptzcoordcalc.cgi?action=getpantilt&responseformat=ssi&imageresolution=$img_width$x$img_height$&imagerotation=$root_Image_I0_Appearance_Rotation$&coordinates=$Pan1$,$Tilt1$:$Pan1$,$Tilt2$:$Pan2$,$Tilt1$:$Pan2$,$Tilt2$&generate_header=no" -->

  <!--#include virtual="/axis-cgi/operator/param.cgi?action=add&group=$group$&template=exclude_area&$group$.I.Name=$AreaName$&$group$.I.Enabled=$Enabled$&$group$.I.Positions=$ptzcoord_pan0$%2C$ptzcoord_tilt0$%3A$ptzcoord_pan1$%2C$ptzcoord_tilt1$%3A$ptzcoord_pan2$%2C$ptzcoord_tilt2$%3A$ptzcoord_pan3$%2C$ptzcoord_tilt3$" -->

<!--#elif expr="$action = update" -->
  <!--#include virtual="/axis-cgi/view/ptzcoordcalc.cgi?action=getpantilt&responseformat=ssi&coordinates=$Pan1$%2C$Tilt1$%3A$Pan1$%2C$Tilt2$%3A$Pan2$%2C$Tilt1$%3A$Pan2$%2C$Tilt2$&imageresolution=$img_width$x$img_height$&imagerotation=$root_Image_I0_Appearance_Rotation$&generate_header=no" -->
  <!--#include virtual="/axis-cgi/operator/param.cgi?action=update&$group$.Name=$AreaName$&$group$.Enabled=$Enabled$&$group$.Positions=$ptzcoord_pan0$%2C$ptzcoord_tilt0$%3A$ptzcoord_pan1$%2C$ptzcoord_tilt1$%3A$ptzcoord_pan2$%2C$ptzcoord_tilt2$%3A$ptzcoord_pan3$%2C$ptzcoord_tilt3$" -->
<!--#elif expr="$action = toggle" -->
  <!--#include virtual="/axis-cgi/operator/param.cgi?action=update&$group$.Enabled=$Enabled$" -->
<!--#elif expr="$action = remove" -->
  <!--#include virtual="/axis-cgi/operator/param.cgi?action=remove&group=$group$" -->
<!--#endif -->
-->
<div style="display: none">
<form id="idListForm">
<!--#include virtual="/sm/sm.srv?action=get_htmlform&getgroup=AutoTracking.A0.ExcludeArea&format=hiddenhtmlform" -->
</form>
</div>

<!--#include virtual="/incl/top_incl2.shtml" -->

<table border="0" cellpadding="3" cellspacing="0" width="100%" valign="top">
  <tr>
    <td class="topTitle" align="left" colspan="2" nowrap><span id="excludeAreasTitleTxt"></span></td>
    <td class="topTitle"><div align="right"><a href="<!--#echo var="helpURL" option="encoding:url" -->"><img height="27" width="27" src="/pics/help.gif" border="0" id="hlpPic"></a></div></td>
  </tr>

  <tr>
    <td colspan="3" noWrap class="subTitle"><span id="excludeAreasTxt"></span></td>
  </tr>

  <tr>
    <td noWrap class="oddItem" colspan="3">
      <table width="480" border=0>
        <tr>
          <td align="left"><span id="nameTxt"></span></td>
          <td align="right"><span id="enabledTxt"></span></td>
        <tr>
      </table>
      <select size="5" style="width: 480px; font-family: monospace; font-size: 10px; white-space: pre;" id="idAreaList" onchange="JavaScript: editArea();"></select>
    </td>
  </tr>
  <tr>
    <td noWrap class="oddItem" colspan="3" align="center">
      <input type="button" class="btnNormal" onclick="JavaScript:addArea();" onMouseOver="return showStatus(AddBtnStatTxt)" onMouseOut="return showStatus('')" id="AuTr_ExAr_AddAreaBtn">
      <input type="button" class="btnNormal" onclick="JavaScript:removeArea();" onMouseOver="return showStatus(RemBtnStatTxt)" onMouseOut="return showStatus('')" id="AuTr_ExAr_RemoveAreaBtn">
      <input type="button" class="btnLarger" onclick="JavaScript:toggleArea();" onMouseOver="return showStatus(EnDisBtnStatTxt)" onMouseOut="return showStatus('')" id="AuTr_ExAr_EnDisBtn">
    </td>
  </tr>

  <tr>
    <td colspan="3" noWrap class="subTitle"><span id="addEditAreaTitleTxt"></span></td>
  </tr>
  <tr>
    <td colspan="1"><span id="areaNameTxt"></span></td>
    <td colspan="2"><input type="text" id="newAreaName" class="fieldName" maxlength="30" disabled></td>
  </tr>
  <tr>
    <td colspan="3" align="center" id="idVideoTD">
      <table border="0" cellpadding="0" cellspacing="0" valign="top">
        <tr>
          <td>
            <div id="filterinstallocation"></div>
            <img id="crosshair" src="/pics/crosshair.png" width="16" height="16" style="position:absolute;visibility:hidden;left:0;top:0" border="0" />
            <script language="JavaScript" type="text/javascript">
            <!--
              var File = "/axis-cgi/mjpg/video.cgi?";
              File += "resolution=<!--#echo var="resolution" option="encoding:url" -->";
              File += "&rotation=<!--#echo var="root_Image_I$nbr$_Appearance_Rotation" option="encoding:url" -->";
              File += "&camera=<!--#echo var="camnbr" option="encoding:url" -->";

              var stopFile = File;
              <!--#include virtual="/incl/video.shtml" -->
              video(File);

              if (browser == "IE") {
                for (var i = 0; i <= 30; i++) {
                  document.write('<input type="hidden" id="x_' + i + '" name="x_' + i + '" value="">');
                  document.write('<input type="hidden" id="y_' + i + '" name="y_' + i + '" value="">');
                  document.write('<input type="hidden" id="w_' + i + '" name="w_' + i + '" value="">');
                  document.write('<input type="hidden" id="h_' + i + '" name="h_' + i + '" value="">');
                }
              }

              stopStartStream(File);
            // -->
            </script>
          </td>
          <td>
            <!--#include virtual="/incl/tiltbar.shtml" -->
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    <td colspan="3" align="center">
      <table border="0" cellpadding="0" cellspacing="0" valign="top">
        <tr>
          <td>
            <!--#include virtual="/incl/bars.shtml" -->
          </td>
        </tr>
      </table>
    </td>
  </tr>
<script language="JavaScript" for="Player" event="OnUserWindowChanged(theID, theXPos, theYPos, theWidth, theHeight, theState, isForced)">
<!--
  {
    document.getElementById('x_' + theID).value = theXPos;
    document.getElementById('y_' + theID).value = theYPos;
    document.getElementById('w_' + theID).value = theWidth;
    document.getElementById('h_' + theID).value = theHeight;
    if (theID < 30 && theID == currentSelecetdIndex) {
      areas[theID].box.x = parseInt(theXPos*<!--#echo var="img_width" option="encoding:javascript" -->/9999, 10);
      areas[theID].box.w = parseInt(theWidth*<!--#echo var="img_width" option="encoding:javascript" -->/9999, 10);
      areas[theID].box.y = parseInt(theYPos*<!--#echo var="img_height" option="encoding:javascript" -->/9999, 10);
      areas[theID].box.h = parseInt(theHeight*<!--#echo var="img_height" option="encoding:javascript" -->/9999, 10);
      if ((theState & 0x000002) == 2) {
        startedEditingArea = true;
      } else {
        var now = new Date();
        var posQuery = "/axis-cgi/view/ptzcoordcalc.cgi?action=getpantilt&responseformat=plain&imageresolution=<!--#echo var="img_width" option="encoding:url" -->x<!--#echo var="img_height" option="encoding:url" -->&imagerotation=<!--#echo var="root_Image_I$nbr$_Appearance_Rotation" option="encoding:url" -->&generate_header=yes&coordinates=" + areas[theID].box.x+","+areas[theID].box.y+ ":" + areas[theID].box.x+","+(areas[theID].box.y+areas[theID].box.h) + ":" + (areas[theID].box.x+areas[theID].box.w)+","+areas[theID].box.y + ":" + (areas[theID].box.x+areas[theID].box.w)+","+(areas[theID].box.y+areas[theID].box.h) + "&timestamp=" + now.getTime();
        var pos = sendAction(posQuery, "GET");
        delete now;
        areas[theID].dirty = true;
        areas[theID].position = pos;
        startedEditingArea = false;
      }
    } else if (theID == 30 && theID == currentSelecetdIndex) {
      areas[areas.length - 1].dirty = true;
    }
  }
//-->
</script>



  <tr>
    <td class="topTitle" align="center" colspan="3">
      <form name="WizardForm" action="<!--#echo var="customWizFormAction" option="encoding:url" -->" method="POST" onSubmit="return false;">
        <table border="0" cellpadding="0" cellspacing="0">
          <tr>
            <td class="button"><input type="button" class="btnNormal" width="75" onClick="JavaScript:saveData()" onMouseOver="return showStatus(SaveBtnStatTxt)" onMouseOut="return showStatus('')" id="AuTr_ExAr_SaveBtn" disabled></td>
            <td class="button">&nbsp;</td>
            <td class="button"><input type="button" width="75" onClick="JavaScript:resetValues()" class="btnNormal" onMouseOver="return showStatus(ResBtnStatTxt)" onMouseOut="return showStatus('')" id="AuTr_ExAr_resetBtn" disabled></td>
          </tr>
        </table>
        <input type="hidden" name="action" value="">
        <input type="hidden" name="group" value="">
        <input type="hidden" name="template" value="exclude_area">
        <input type="hidden" name="AreaName" value="">
        <input type="hidden" name="Enabled" value="">
        <input type="hidden" name="Pan1" value="">
        <input type="hidden" name="Pan2" value="">
        <input type="hidden" name="Tilt1" value="">
        <input type="hidden" name="Tilt2" value="">
        <input type="hidden" name="Positions" value="">
        <input type="hidden" name="SAVE_MANY" value="">
      </form>




      <!--#if expr="$queue != no" -->
        <form action="/sm/sm.srv" method="POST">
          <table border="0" cellpadding="3" cellspacing="0" width="100%">
            <tr>
              <td class="subTitle" colspan="5" align="left" class="evenItem"><span id="queSetTxt"></span></td>
            </tr>
            <tr>
              <!--#include virtual="/sm/sm.srv?action=get_htmlform&get=root.PTZ.Various.V$camnbr$.CtlQueueing&pre_format=<TD>&middle_format=:%26nbsp;</TD><TD>&end_format=</FONT></TD></TR>" -->
              <!--#include virtual="/sm/sm.srv?action=get_htmlform&get=root.PTZ.Various.V$camnbr$.CtlQueueLimit&pre_format=<TD>&middle_format=:%26nbsp;</TD><TD>&end_format=</FONT></TD></TR>" -->
            <tr>
              <td align="left" colspan="5" class="evenItem">
                <input type="hidden" name="action" value="modify">
                <input type="button" class="btnNormal" id="AuTr_ExAr_applyBtn" onclick="enableQueue(this.form)">
                <input type="hidden" name="camera" value="<!--#echo var="camnbr" option="encoding:url" -->">
              </td>
            </tr>
          </table>
        </form>
      <!--#endif -->

      <!--#if expr="$queueUsers = yes" -->
      <table border="0" cellpadding="3" cellspacing="0" width="100%">
        <tr>
          <td class="subTitle" colspan="5" align="left"><span id="ptzQueUsersTxt"></span></td>
        </tr>
        <tr>
          <td nowrap class="oddItem"><span id="statQuTxt"></span></td>
          <td class="oddItem"><input type="text" name="ptzqstatus" value="" size="65" disabled></td>
          <td nowrap class="oddItem" align="right"><span id="posQuTxt"></span></td>
          <td class="oddItem"><input type="text" name="ptzqpos" value="" size="12" disabled></td>
          <td class="oddItem">&nbsp;</td>
        </tr>
        <tr>
          <td nowrap class="oddItem" nowrap><span id="tiReTxt"></span></td>
          <td class="oddItem" nowrap><input type="text" name="ptzqtleft" value="" size="10" disabled>&nbsp;<span id="secsTxt"></span></td>
          <td class="oddItem" colspan="2" align="right">
            <input type="hidden" name="ptzqcontrol"  value="request">
            <input type="hidden" name="ptzqcamera" value="<!--#echo var="camnbr" option="encoding:url" -->">
            <input type="hidden" name="ptzqtagresponse" value="yes">
            <input type="button" name="ptzqlabel" class="btnLarge" value="Request control" onClick="JavaScript:ctlReq(this.form)">
            <input type="hidden" name="ptzqcontrol" value="query">
            <input type="hidden" name="ptzqtagresponse" value="yes">
            <input type="hidden" name="ptzqcamera" value="<!--#echo var="camnbr" option="encoding:url" -->">
          </td>
        </tr>
        <script language="JavaScript">ctlStart();</script>
        <tr>
          <td colspan="5" align="center" class="oddItem">&nbsp;</td>
        </tr>
      </table>
      <!--#endif -->

    </td>
  </tr>
</table>
<!--#include virtual="/incl/bottom_incl.shtml" -->
